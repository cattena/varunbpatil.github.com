<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>Varun B Patil's blog</title>
<description>Varun B Patil's blog</description>
<link>http://varunbpatil.github.com/</link>

<item>
<title>Configuring Lenovo T440s touchpad in Linux</title>
<link>http://varunbpatil.github.com/2014/08/19/t440s-touchpad</link>
<published>2014-08-19T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2014/08/19/t440s-touchpad</guid>
<description>&lt;p&gt;The first (and only) thing I disliked when I moved from using the Lenovo T420 to the Lenovo T440s laptop was the touchpad on the T440s. T440s has a Apple-ish touchpad which can seem unfriendly (compared to the fantastic T420 touchpad with physical touch buttons), but becomes quite usable with experience. The following configuration tweaks the touchpad driver to allow the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two finger touch for right click&lt;/li&gt;
&lt;li&gt;Three finger touch for middle click&lt;/li&gt;
&lt;li&gt;Two finger vertical and horizontal scroll&lt;/li&gt;
&lt;li&gt;Edge scroll&lt;/li&gt;
&lt;li&gt;Palm detect (to avoid unwanted clicks while typing)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the above features, add the following to the &lt;strong&gt;end of the file /usr/share/X11/xorg.conf.d/50-synaptics.conf&lt;/strong&gt; (edit as root).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# custom touchpad settings
# view current values with synclient -l
Section &amp;quot;InputClass&amp;quot;
    Identifier &amp;quot;touchpad catchall&amp;quot;
    Driver &amp;quot;synaptics&amp;quot;
    MatchIsTouchpad &amp;quot;on&amp;quot;
    MatchDevicePath &amp;quot;/dev/input/event*&amp;quot;
    Option &amp;quot;TapButton1&amp;quot; &amp;quot;1&amp;quot;
    Option &amp;quot;TapButton2&amp;quot; &amp;quot;3&amp;quot;
    Option &amp;quot;TapButton3&amp;quot; &amp;quot;2&amp;quot;
    Option &amp;quot;HorizTwoFingerScroll&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;VertTwoFingerScroll&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;HorizEdgeScroll&amp;quot; &amp;quot;1&amp;quot;
    Option &amp;quot;VertEdgeScroll&amp;quot; &amp;quot;1&amp;quot;
    Option &amp;quot;HorizHysteresis&amp;quot; &amp;quot;30&amp;quot;
    Option &amp;quot;VertHysteresis&amp;quot; &amp;quot;30&amp;quot;
    Option &amp;quot;PalmDetect&amp;quot; &amp;quot;1&amp;quot;
    Option &amp;quot;RTCornerButton&amp;quot; &amp;quot;0&amp;quot;
    Option &amp;quot;RBCornerButton&amp;quot; &amp;quot;0&amp;quot;
    Option &amp;quot;LTCornerButton&amp;quot; &amp;quot;0&amp;quot;
    Option &amp;quot;LBCornerButton&amp;quot; &amp;quot;0&amp;quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The RTCornerButton, RBCornerButton, LTCornerButton, LBCornerButton options specify what clicking on the corners of the toucpad does. In this case, they don&amp;#39;t do anything special, but can be configured to do something special like a right click or middle click.&lt;/p&gt;

&lt;p&gt;You can view all the current options for your touchpad with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ synclient -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then use these options to further configure your touchpad.&lt;/p&gt;
</description>
</item>

<item>
<title>Alternatives to Truecrypt on Linux</title>
<link>http://varunbpatil.github.com/2014/06/01/truecrypt-alt</link>
<published>2014-06-01T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2014/06/01/truecrypt-alt</guid>
<description>&lt;p&gt;Since Truecrypt has mysteriously shutdown, here are a few alternative encryption tools for Linux.&lt;/p&gt;

&lt;h4&gt;dm-crypt (cryptsetup)&lt;/h4&gt;

&lt;p&gt;dm-crypt(cryptsetup) is an alternative to Truecrypt for creating encrypted containers. Although dm-crypt doesn&amp;#39;t come with a GUI like Truecrypt does, the following are some very simple steps to help you create your own LUKS encrypted container on Linux.&lt;/p&gt;

&lt;p&gt;Download and install the &lt;a href=&quot;https://code.google.com/p/cryptsetup/wiki/Downloads?tm=2&quot;&gt;latest version of cryptsetup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, create a container of the required size (Later on, I will show you how to extend the size of this container when needed). Let us create a 512MB container below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/urandom of=crypt_data bs=1M count=512
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The name of the container we have created above is &amp;#39;crypt_data&amp;#39;.&lt;/p&gt;

&lt;p&gt;Next, find out a free loop device that you can use to loop mount the above file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Suppose, the output of the above command is &amp;#39;/dev/loop0&amp;#39;,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup /dev/loop0 /path/to/crypt_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, create a LUKS container inside the file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# cryptsetup luksFormat /dev/loop0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted to enter and verify the passphrase.&lt;/p&gt;

&lt;p&gt;Now, for a quick sanity check of the process so far, run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ file /path/to/crypt_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see output like &amp;quot;crypt_data: LUKS encrypted file ...&amp;quot;&lt;/p&gt;

&lt;p&gt;Now, map the LUKS container&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# cryptsetup luksOpen /dev/loop0 raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this step, you should see the file &amp;#39;/dev/mapper/raw_data&amp;#39; created.&lt;/p&gt;

&lt;p&gt;The LUKS container doesn&amp;#39;t yet contain a file system. So let&amp;#39;s go ahead and format the container as EXT4.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# mkfs.ext4 /dev/mapper/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, go ahead and mount the file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir /tmp/raw_data

# mount /dev/mapper/raw_data /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Done !!!. Dump the files that you want to encrypt into /tmp/raw_data. When you are done, follow the reverse process as below.&lt;/p&gt;

&lt;p&gt;Unmount the file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# umount /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Close the LUKS container&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# cryptsetup luksClose raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Free the loop device.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup -d /dev/loop0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Done !!!. Your new encrypted container is crypt_data.&lt;/p&gt;

&lt;p&gt;The steps above seem to be cumbersome, but they are only needed to create a new encrypted container. Using an existing LUKS encrypted container is as simple as below (assuming /dev/loop0 is a free loop device).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup /dev/loop0 /path/to/crypt_data

# cryptsetup luksOpen /dev/loop0 raw_data

# mount /dev/mapper/raw_data /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The raw data is now ready to be consumed/modified at /tmp/raw_data. When you are done,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# umount /tmp/raw_data

# cryptsetup luksClose raw_data

# losetup -d /dev/loop0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;

&lt;p&gt;Now, what if the size of the container you created is no longer enough, and you want to extend it. Don&amp;#39;t fret. It&amp;#39;s easy. Most of the process being similar to the above.&lt;/p&gt;

&lt;p&gt;Suppose, you want to extend the container&amp;#39;s size by 128MB,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/urandom bs=1M count=128 | cat - &amp;gt;&amp;gt; /path/to/crypt_data

# losetup /dev/loop0 /path/to/crypt_data

# cryptsetup luksOpen /dev/loop0 raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, resize the encrypted portion of the container.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# cryptsetup resize raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, resize the filesystem.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# e2fsck -f /dev/mapper/raw_data

# resize2fs /dev/mapper/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it. Resizing is complete. You can now mount and use the resized container like before.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# mount /dev/mapper/raw_data /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;tcplay : create and open truecrypt containers&lt;/h4&gt;

&lt;p&gt;While the latest versions of cryptsetup allow you to create and open truecrypt containers, there is another utility called tcplay which also allows you to do just that (without installing truecrypt, ofcourse). Again, many of the steps are same as the one&amp;#39;s for dm-crypt(cryptsetup).&lt;/p&gt;

&lt;p&gt;Install tcplay in ubuntu.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# apt-get install tcplay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, create a container of the required size (512MB in this case).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/urandom of=crypt_data bs=1M count=512
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Find out a free loop device.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Suppose the output is &amp;#39;/dev/loop0&amp;#39;,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup /dev/loop0 /path/to/crypt_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create the truecrypt container.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# tcplay -c -d /dev/loop0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Map the container.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# tcplay -m raw_data -d /dev/loop0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should now see the file &amp;#39;/dev/mapper/raw_data&amp;#39;.&lt;/p&gt;

&lt;p&gt;Create a filesystem inside the container.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# mkfs.ext4 /dev/mapper/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mount the filesystem.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir /tmp/raw_data

# mount /dev/mapper/raw_data /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ready !!!. Copy raw files into /tmp/raw_data. When you are done, follow the reverse process.&lt;/p&gt;

&lt;p&gt;Unmount the filesystem.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# umount /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unmap the file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# dmsetup remove raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Free the loop device.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup -d /dev/loop0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ofcourse, the above steps are only to be followed to create a new truecrypt container. To use an existing truecrypt container (like the one already created with the now abandoned Truecrypt), the following steps suffice.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# losetup /dev/loop0 /path/to/crypt_data

# tcplay -m raw_data -d /dev/loop0

# mount /dev/mapper/raw_data /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To finish, follow the reverse procedure.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# umount /tmp/raw_data

# dmsetup remove raw_data

# losetup -d /dev/loop0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;EncFS : userspace encryption&lt;/h4&gt;

&lt;p&gt;With Truecrypt, dm-crypt(cryptsetup) and tcplay you have to create a single file (container) and a filesystem within that to hold your encrypted files. EncFS works on the existing filesystem. Also, no root permissions required.&lt;/p&gt;

&lt;p&gt;To create an encrypted directory &amp;#39;crypt_data&amp;#39; with EncFS,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir /tmp/raw_data

$ encfs /absolute/path/to/crypt_data /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: encfs requires you to specify absolute paths on the command line.&lt;/p&gt;

&lt;p&gt;You will be prompted for a passphrase.&lt;/p&gt;

&lt;p&gt;Now, you can copy the raw files (unencrypted) into /tmp/raw_data. When you are done,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ fusermount -u /tmp/raw_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see the encrypted files inside &amp;#39;crypt_data&amp;#39;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s very simple !!!.&lt;/p&gt;

&lt;h4&gt;BONUS : Using truecrypt and EncFS on Android&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/cryptonite/&quot;&gt;Cryptonite&lt;/a&gt; is an android app (still in development) that allows you to easily mount (on Cyanogenmod), export, browse EncFS encrypted directories from the GUI. Truecrypt support is only via command line/terminal emulator (at the moment).&lt;/p&gt;
</description>
</item>

<item>
<title>Connecting to wired/wireless networks via command line</title>
<link>http://varunbpatil.github.com/2014/06/01/network-command-line</link>
<published>2014-06-01T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2014/06/01/network-command-line</guid>
<description>&lt;p&gt;If you use a window manager like DWM, i3, Xmonad, etc, you are more than likely to get rid of the usual panel/system tray you would normally find in xfwm, lxde, etc. So here is how you can use the command line to connect to wired/wireless networks in Linux.&lt;/p&gt;

&lt;p&gt;NOTE: The following tutorial uses the &amp;#39;ip&amp;#39; command instead of the ifconfig command where possible.&lt;/p&gt;

&lt;h4&gt;Pre-requisites&lt;/h4&gt;

&lt;p&gt;If you want to connect to wireless networks secured with WPA, you will need to install wpasupplicant.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install wpasupplicant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to connect to a PPP network (Ex: Reliance netconnect+ broadband), you will need to install wvdial.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install wvdial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Connecting to a wired network&lt;/h4&gt;

&lt;p&gt;Assuming your wired network interface is named eth0,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo ip link set dev eth0 up

$ sudo dhclient eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Connecting to a wireless (WEP) network&lt;/h4&gt;

&lt;p&gt;Assuming the essid of the wireless network you are trying to connect to is XXXXXXX and the hex key is YYYYYYY, and the your wireless network interface is named wlan0,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo ip link set dev wlan0 up

$ sudo iwconfig wlan0 essid &amp;quot;XXXXXXX&amp;quot;

$ sudo iwconfig wlan0 key YYYYYYY

$ sudo dhclient wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Connecting to a wireless (WPA) network&lt;/h4&gt;

&lt;p&gt;Assuming the essid of the wireless network you are trying to connect to is XXXXXXX and the hex key is YYYYYYY, and your wireless network interface is named wlan0, first create a config file under /etc as shown below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo touch /etc/wpa_supplicant_xxxx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: you can use any file name above. One file required per wireless network that you want to connect to.&lt;/p&gt;

&lt;p&gt;Enter the following contents into the above file and save it (root permission required).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ap_scan=1
ctrl_interface=/var/run/wpa_supplicant

network={
    ssid=&amp;quot;XXXXXXX&amp;quot;
    scan_ssid=0
    proto=WPA
    key_mgmt=WPA-PSK
    psk=&amp;quot;YYYYYYY&amp;quot;
    pairwise=TKIP
    group=TKIP
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to connect to the above wireless network,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo ip link set dev wlan0 up

$ sudo wpa_supplicant -Dwext -iwlan0 -c/etc/wpa_supplicant_xxxx.conf -B

$ sudo dhclient wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;BONUS : Connecting to wireless (PEAP) network&lt;/h4&gt;

&lt;p&gt;PEAP encrypted networks are usually used in corporate environments. Here&amp;#39;s how you can connect to it.&lt;/p&gt;

&lt;p&gt;Assuming the essid of the wireless network you are trying to connect to is XXXXXXX and the hex key is YYYYYYY, and your wireless network interface is named wlan0, first create a config file under /etc as shown below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo touch /etc/wpa_supplicant_xxxx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: you can use any file name above. One file required per wireless network that you want to connect to.&lt;/p&gt;

&lt;p&gt;Enter the following contents into the above file and save it (root permission required).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;network={
    ssid=&amp;quot;XXXXXXX&amp;quot;
    key_mgmt=WPA-EAP
    eap=PEAP
    identity=&amp;quot;username@company.com&amp;quot;
    password=&amp;quot;YYYYYYY&amp;quot;
    pairwise=CCMP TKIP
    group=CCMP TKIP
    phase2=&amp;quot;auth=MSCHAPV2&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to connect to the above wireless network,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo ip link set dev wlan0 up

$ sudo wpa_supplicant -Dwext -iwlan0 -c/etc/wpa_supplicant_xxxx.conf -B

$ sudo dhclient wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;BONUS : Connecting to a PPP network (Mobile Broadband)&lt;/h4&gt;

&lt;p&gt;First, create the following file under /etc&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo touch /etc/wvdial.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enter the following contents into the above file (for reliance netconnect+ broadband)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[Dialer Defaults]
Phone =
Username =
Password =
New PPPD = yes

[Dialer NAME_OF_YOUR_NETWORK]
Phone = #777
Username = &amp;lt;username&amp;gt;
Password = &amp;lt;password&amp;gt;
Stupid Mode = 1
Idle Seconds = 0
Dial Attempts = 0
Modem = /dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to connect to the mobile broadband network above,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo wvdial NAME_OF_YOUR_NETWORK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;BONUS : Listing available wireless networks&lt;/h4&gt;

&lt;p&gt;To list the available wireless networks (i.e, their essid&amp;#39;s) much like Network Manager does,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo ip link set dev wlan0 up

$ sudo iwlist wlan0 scan | grep ESSID | awk -F\&amp;quot; &amp;#39;{print $2}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>

<item>
<title>Android reverse USB tethering</title>
<link>http://varunbpatil.github.com/2014/03/21/reverse-tethering</link>
<published>2014-03-21T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2014/03/21/reverse-tethering</guid>
<description>&lt;p&gt;We all know what USB tethering is in android -- enabling internet connectivity on your PC via your phone. Reverse USB tethering is... well... exactly the reverse. Enabling internet connectivity on your phone via your PC. The following tutorial shows you how to set up reverse USB tethering on Linux. Also included is a shell script to automate the setup on Linux.&lt;/p&gt;

&lt;h4&gt;How to set up reverse USB tethering on Linux&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Connect your android phone to your PC via USB and enable USB tethering from the settings on your phone.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find out the new network interface that was created on your PC with the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ifconfig  # on your PC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my case, the new network interface was &lt;strong&gt;usb0&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enter the following commands on your Linux PC.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo ifconfig usb0 10.42.0.1 netmask 255.255.255.0

$ echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward

$ sudo iptables -t nat -F

$ sudo iptables -t nat -A POSTROUTING -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the following commands on your android phone. You can either use terminal emulator or enter the command through &lt;a href=&quot;http://localhost:4000/2012/06/18/adb/&quot;&gt;ADB&lt;/a&gt; like below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ adb shell busybox ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note down the network interface on your android phone. Mine was &lt;strong&gt;rndis0&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ adb shell ifconfig rndis0 10.42.0.2 netmask 255.255.255.0

$ adb shell route add default gw 10.42.0.1 dev rndis0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Verify internet connectivity on your phone with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ adb shell ping 8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it. You now have internet connectivity on your android phone.&lt;/p&gt;

&lt;p&gt;I have written a small &lt;a href=&quot;http://pastebin.com/raw.php?i=wqVnx9Vw&quot;&gt;shell script&lt;/a&gt; to automate the above process on Linux. You can get it with the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget http://pastebin.com/raw.php?i=wqVnx9Vw -O rev_usb_tether.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run it on your PC with the following commands.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ chmod +x rev_usb_tether.sh

$ ./rev_usb_tether.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER :&lt;/strong&gt; Some apps like gmail, play store still won&amp;#39;t recognize the internet connection.&lt;/p&gt;
</description>
</item>

<item>
<title>GitHub project contribution workflow</title>
<link>http://varunbpatil.github.com/2013/12/26/github-contrib</link>
<published>2013-12-26T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/12/26/github-contrib</guid>
<description>&lt;p&gt;I only recently started contributing to other projects on GitHub, and while I am quite comfortable with the normal git workflow, I had never given a thought about how to use git to contribute to other projects (especially on GitHub). Although, I found many articles on the web, most of them were too complex to follow or missed out on some parts. So, I put together the good bits I found around the web and here it is.&lt;/p&gt;

&lt;h4&gt;Fork&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Login to your GitHub account.&lt;/li&gt;
&lt;li&gt;Goto the GitHub page of the project you intend to contribute to.&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;fork&lt;/strong&gt; button (top right).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should now have a new repository on your GitHub page with the words &amp;quot;forked from ____&amp;quot; under the name of your repository.&lt;/p&gt;

&lt;h4&gt;Clone&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clone your GitHub repository (&lt;strong&gt;not&lt;/strong&gt; the original project repo that you just forked). For example, I did&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone git@github.com:varunbpatil/openh264.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where the main project GitHub repo that I intended to contribute to was git@github.com:cisco/openh264.git&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set upstream repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your repository is not automatically kept to date with the original project repo. You have to do it manually. So, first set the upstream repo like so.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git remote add upstream git@github.com:cisco/openh264.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To update your local repo to match the original project repo (also called upstream), do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git pull upstream master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This updates your repo&amp;#39;s master branch with the updates from the upstream repo&amp;#39;s (original project repo&amp;#39;s) master branch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Push any master branch updates to your GitHub repo (so that your GitHub repo itself is kept up to date with the main project repo and not just your local clone).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that you are not contributing anything by doing this. You are simply keeping the master branch of your repository up to date with the master branch of the upstream repo.&lt;/p&gt;

&lt;h4&gt;Contribute&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a new branch to make a new contribution (a new feature or a bug fix, etc).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git checkout -b my_new_feature_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will notice that after the above command you are automatically put on the my_new_feature_1 branch and not the master branch of your repo. Confirm this by typing&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see a * (asterisk) next to the branch my_new_feature_1.&lt;/p&gt;

&lt;p&gt;It is recommended that you keep the master branch of your repo clean, and do not make any changes (or contributions) on top of your master branch (although it can be done if you intend to make a quick contribution, a one time contribution).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make as many commits as you like on this branch and push to your repository on GitHub.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push origin my_new_feature_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This creates the branch my_new_feature_1 on your GitHub repo as well. This branch only existed on your local cloned repo until now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now, you can ask the maintainers of the original project to consider your contributions by making a &lt;strong&gt;pull request&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do so, goto the GitHub webpage of &lt;strong&gt;your&lt;/strong&gt; repo and then change the branch to my_new_feature_1 from the drop down menu just below the repo stats (the default branch shown on the web page is Master branch).&lt;/p&gt;

&lt;p&gt;Next, click on the &amp;quot;Pull Request&amp;quot; link which should be on the line below the drop down menu alongside the &amp;quot;Compare&amp;quot; link (&lt;strong&gt;not&lt;/strong&gt; the &amp;quot;Pull Requests&amp;quot; tab on the sidebar on the right).&lt;/p&gt;

&lt;p&gt;Review the changes that you are going to submit, write a short description explaining your changes and then go ahead and submit the pull request.&lt;/p&gt;

&lt;p&gt;Now, goto the web page of the main GitHub project that you forked, click on the &amp;quot;Pull Requests&amp;quot; tab on the right hand sidebar. You should see the pull request that your just made along with possibly other pull requests that others have made.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wanna make more changes and contributions after a pull request has been submitted ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure, no problem. Continue to make commits to the my_new_feature_1 branch of your repository and push them to your repository.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push origin my_new_feature_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You &lt;strong&gt;don&amp;#39;t&lt;/strong&gt; need to issue another pull request for the new commit. These new commits are automatically added to the pull request you made earlier provided that you committed to the same branch (my_new_feature_1). GitHub&amp;#39;s policy is &lt;strong&gt;one pull request per branch&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Want to add another new feature ? Why not... Just create another branch for your new feature and follow the same steps.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git checkout master
$ git checkout -b my_new_feature_2
$ #make some commits in this branch
$ git push origin my_new_feature_2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goto the web page of your GitHub repo, select the my_new_feature_2 branch from the drop down menu, click on the &amp;quot;Pull Request&amp;quot; link, review and submit the pull request. Voila !!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All is well until someone review&amp;#39;s your pull request and suggests that you make some changes for your contributions to be accepted into the original project&amp;#39;s repo. There are two approaches to this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first approach is to make more commits on top of the commits you have already submitted addressing any issues. But, I don&amp;#39;t prefer this method, since it creates unnecessary commits, thus dirtying the commit history of the repo.&lt;/p&gt;

&lt;p&gt;Since, the project&amp;#39;s maintainers haven&amp;#39;t yet merged your commit&amp;#39;s into the main repo, you are better of rewriting the commit history of your repo. This way your have a cleaner commit history with no unwanted commits and your new commits do exactly the same job as before while considering the suggestions made by the person(s) who reviewed your pull request(s). However, never use this method when several people are contributing to your repo (i.e, when others have cloned your repo, and are making changes on the same branch that you are).&lt;/p&gt;

&lt;p&gt;I won&amp;#39;t go into details of the exact git commands that you need to use to rewrite commit history, but the following are probably the ones you are looking for (not in any order).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git reset --soft # remove commit, but keep changes
$ git rebase -i # reorder commits, squash commits, split commits
$ git commit --amend # change commit message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you are done with the changes, make them visible to the project&amp;#39;s maintainers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push origin my_new_feature_1 -f # forcefully change commit history
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your pull request will automatically be changed to reflect your newly modified commits. There is &lt;strong&gt;no need&lt;/strong&gt; to issue another pull request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Congratulations... Your contributions have been merged into the original project and your pull request has been closed. What next ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Delete the branch that the pull request corresponds to on your cloned copy as well as on your GitHub repo.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git checkout master
$ git branch -d my_new_feature_1 # deletes local branch
$ git push origin :my_new_feature_1 # deletes remote branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the colon in the last command above is intentional.&lt;/p&gt;

&lt;p&gt;Note that you also get a link on the GitHub web page to delete the branch corresponding to the pull request once the pull request has been closed.&lt;/p&gt;

&lt;p&gt;Verify that your contributions have indeed been merged into the original project repo.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git pull upstream master
$ git log # should see your commits here
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Closing a pull request prematurely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Suppose you want to cancel a pull request before it has been merged into the main project repo, goto your pull request on the original project repo&amp;#39;s webpage and click the &amp;quot;close&amp;quot; link and the bottom of the webpage (just below the comment boxes). You may also reopen a pull request at a later point of time from the webpage.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
Any question or suggestions are welcome in the comments below. Happy contributing :)&lt;/p&gt;
</description>
</item>

<item>
<title>Linux command line tools and tricks - Part 3</title>
<link>http://varunbpatil.github.com/2013/11/18/linux-tricks-3</link>
<published>2013-11-18T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/11/18/linux-tricks-3</guid>
<description>&lt;p&gt;Here is another sequel to my &lt;a href=&quot;http://varunbpatil.github.io/2012/09/19/linux-tricks&quot;&gt;Linux command line tools and tricks - Part 1&lt;/a&gt; and &lt;a href=&quot;http://varunbpatil.github.io/2012/10/01/linux-tricks-2&quot;&gt;Linux command line tools and tricks - Part 2&lt;/a&gt; where I collect some of the most interesting command line tools and tricks from around the web. So, let&amp;#39;s get started.&lt;/p&gt;

&lt;h4&gt;Using webcam as a mirror&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install mplayer
$ mplayer -vf mirror -v tv:// -tv device=/dev/video0:driver=v4l2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Download pronunciation of an English word as mp3 file&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ word=&amp;quot;apple&amp;quot;; wget http://ssl.gstatic.com/dictionary/static/sounds/de/0/$word.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Remove duplicate files in a directory(based on md5sum)&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dir=&amp;quot;/path/to/directory&amp;quot;  # set the directory path here
$ diff \
  &amp;lt;(find ${dir} -type f -print0 | xargs -0 -n1 md5sum | sort | uniq -w32) \
  &amp;lt;(find ${dir} -type f -print0 | xargs -0 -n1 md5sum | sort) | \
  awk -F&amp;#39;  &amp;#39; &amp;#39;/&amp;gt;/ {print $2}&amp;#39; | tr &amp;#39;\n&amp;#39; &amp;#39;\000&amp;#39; | xargs -I{} -0 -n1 rm -vrf {}
$ find ${dir} -type d -empty -delete  # (bonus)delete any empty sub-directories
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Command no. 2 above looks very scary. Fact is, it is very easy to understand.&lt;/p&gt;

&lt;p&gt;The first &amp;quot;find&amp;quot; command,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;(find ${dir} -type f -print0 | xargs -0 -n1 md5sum | sort | uniq -w32) \
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;basically finds out all the unique md5sums in the directory which is also the files that we would like to keep in the final output directory. Our main aim is to remove all the files that are not in the output of the above find command because they are duplicates of files that are already in the output of the above find command.&lt;/p&gt;

&lt;p&gt;The second &amp;quot;find&amp;quot; command,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;(find ${dir} -type f -print0 | xargs -0 -n1 md5sum | sort) | \
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;basically lists all files in the directory sorted by their md5sums.&lt;/p&gt;

&lt;p&gt;So, if we subtract the output of the first find command from the output of the second find command, we are left with a list of files that we should remove from the directory to be left with no duplicate files in the end. And that is precisely what the rest of the command is doing.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;diff &amp;lt;(...) &amp;lt;(...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is basically subtracting the output of the first find command from the output of the second find command. The special notation used here, &amp;lt;(...) is what is known as &amp;quot;process substitution&amp;quot; which basically means that we are treating the output of a process/command as a file, which in this case, we are feeding to the diff command. The output of the above diff command is the list of files we need to remove, so we pipe the output of the diff command to &amp;quot;rm&amp;quot; via xargs after modifying the line endings to be null characters instead of newline using the &amp;quot;tr&amp;quot; command.&lt;/p&gt;

&lt;p&gt;Couldn&amp;#39;t be simpler !!!. Ofcourse, this command is perfect candidate for a tiny &lt;a href=&quot;http://pastebin.com/raw.php?i=G6qnBXkB&quot;&gt;shell script which you can find here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Deleting trailing whitespaces in a file&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sed -ri.bak &amp;#39;s/ *$//&amp;#39; &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is basically telling sed to replace any number of consecutive spaces at the end of each line in given file with nothing. The file is edited in-place, but a backup file is created in the same directory with the suffix .bak&lt;/p&gt;

&lt;h4&gt;ps command in tree format&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ps -auxwf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Clearly shows parent child relationship.&lt;/p&gt;

&lt;h4&gt;Check internet usage this session&lt;/h4&gt;

&lt;p&gt;To show the wireless internet usage this session(in MB), run the following command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;quot;scale=1; `cat /sys/class/net/wlan0/statistics/rx_bytes`/1000000&amp;quot; | bc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To show the wired internet usage this session(in MB), run the following command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;quot;scale=1; `cat /sys/class/net/eth0/statistics/rx_bytes`/1000000&amp;quot; | bc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Making Firefox faster by caching in RAM instead of on disk&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;/dev/shm&lt;/strong&gt; is of type tempfs. Its size is usually half of the available RAM. It is mapped to virtual memory i.e, RAM. Any file you create there will not be created on disk. So it is lost on reboot. To make Firefox faster, we simply tell Firefox to put its cache into /dev/shm. This also protects privacy since cache is not written to disk.&lt;/p&gt;

&lt;p&gt;Type the URL &amp;quot;&lt;strong&gt;about:config&lt;/strong&gt;&amp;quot; in your Firefox URL bar.&lt;/p&gt;

&lt;p&gt;Search for &amp;quot;&lt;strong&gt;browser.cache.disk&lt;/strong&gt;&amp;quot;&lt;/p&gt;

&lt;p&gt;Add a new &amp;quot;&lt;strong&gt;string&lt;/strong&gt;&amp;quot; entry: &amp;quot;&lt;strong&gt;browser.cache.disk.parent_directory&lt;/strong&gt;&amp;quot; with the value &amp;quot;&lt;strong&gt;/dev/shm&lt;/strong&gt;&amp;quot;&lt;/p&gt;

&lt;p&gt;Make sure &lt;strong&gt;browser.cache.disk.enable&lt;/strong&gt; is True&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it. Now, restart Firefox, and you should see a cache file created in /dev/shm.&lt;/p&gt;

&lt;h4&gt;Setting wallpaper via command line&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install feh
$ feh --bg-fill &amp;lt;path to image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can be used with startup scripts or login scripts. Especially useful in tiling window managers like &lt;a href=&quot;http://varunbpatil.github.io/2013/09/28/dwm&quot;&gt;DWM&lt;/a&gt; and &lt;a href=&quot;http://varunbpatil.github.io/2013/09/20/xmonad&quot;&gt;Xmonad&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Faster sshfs&lt;/h4&gt;

&lt;p&gt;sshfs can be used to mount a remote directory locally using ssh, and hence comes with the security of ssh as well as the annoying delays in sync :P. So, if you are on an already secure connection, you can speed up sshfs by removing one layer of encryption using socat as below&lt;/p&gt;

&lt;p&gt;On the remote server,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install socat
$ socat TCP4-LISTEN:7777 EXEC:/usr/lib/sftp-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On local machine,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sshfs -o directport=7777 remote_hostname:/remote/dir /local/dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice we don&amp;#39;t specify a username for the remote machine in the above command.&lt;/p&gt;

&lt;h4&gt;Setting up a static IP via command line&lt;/h4&gt;

&lt;p&gt;Especially useful when you are running lightweight window managers like &lt;a href=&quot;http://varunbpatil.github.io/2013/09/28/dwm&quot;&gt;DWM&lt;/a&gt; or &lt;a href=&quot;http://varunbpatil.github.io/2013/09/20/xmonad&quot;&gt;Xmonad&lt;/a&gt; and do not have a tray applet to control network connections.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo ifconfig eth0 10.0.0.1 netmask 255.255.255.0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Scanning for networks via command line&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo iwlist wlan0 scan   # scan for wireless networks
$ sudo iwlist eth0 scan    # scan for wired networks
$ sudo iwconfig wlan0 essid &amp;quot;actual essid&amp;quot; # select network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, this is useful if you do not have or do not want a tray applet to control networks (like nm-applet).&lt;/p&gt;

&lt;h4&gt;Creating a file that does not grow beyond a set size&lt;/h4&gt;

&lt;p&gt;Suppose you want to create a log file whose max size should not become more that 100 MB.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/zero of=./100mb.img bs=1M count=100  # create a 100 MB file
$ mkfs.ext2 -t ext2 100mb.img  # create an ext2 filesystem
$ mkdir /tmp/100mb
$ sudo mount -t ext2 100mb.img /tmp/100mb/ # mount the filesystem
$ touch /tmp/100mb/logfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, logfile cannot grow beyond 100 MB. However, note that the fixed size you have in mind must be enough to create a filesystem in it.&lt;/p&gt;

&lt;h4&gt;Mounting an image file&lt;/h4&gt;

&lt;p&gt;You can create a complete backup(mirror image) of an external memory device like so.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo dd if=/dev/sdX of=mem_bkup.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the reverse process will restore the backup onto your external memory device.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo dd if=mem_bkup.img of=/dev/sdX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if you wanted to access the contents within mem_bkup.img without restoring it back onto your external memory device ?
The solution is to mount mem_bkup.img. But this process is not straightforward.&lt;/p&gt;

&lt;p&gt;First, run the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo fdisk -l mem_bkup.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note down the sector size (search for a line which has something like &amp;quot;units = sectors of 1*512 = 512 bytes&amp;quot;). So, the sector size in this case is 512 bytes. Also note down the start sector of the partition that you would like to mount. Let us suppose the start sector of the first partition is &amp;#39;x&amp;#39;.&lt;/p&gt;

&lt;p&gt;Multiply the start sector(x) and the sector size(512) to get the offset(y).&lt;/p&gt;

&lt;p&gt;y = x * 512&lt;/p&gt;

&lt;p&gt;Now, to mount partition 1, run the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo mount -o loop,offset=y mem_bkup.img &amp;lt;mount_point&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Multiple commands in the background, Important distinction&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ (command1; command2; command3) &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, commands are executed sequentially but all of them are executed in the background.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ (command1 &amp;amp; command2) &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, command1 is started in the background followed immediately by command2 i.e, command2 does not wait for command1 to complete. Both the commands are still executed in the background. Note that &amp;amp; also performs the function of ; in that it seperates the two commands. Here, $! returns the pid of the process group and not the pid of either command1 or command2.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ (command1; command2) &amp;amp;
$ wait $!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is how you wait for the group of background tasks to complete in a script.&lt;/p&gt;

&lt;h4&gt;Disconnecting a process from the terminal&lt;/h4&gt;

&lt;p&gt;Suppose you start a program like say &amp;quot;vlc&amp;quot; from the terminal, it opens up an new window and you no longer need the terminal to be open. But if you close the terminal, vlc is also terminated, because it is attached to the terminal. To disconnect the two, just do the following.&lt;/p&gt;

&lt;p&gt;Press Ctrl-Z to suspend vlc.&lt;/p&gt;

&lt;p&gt;Then type the command &amp;quot;&lt;strong&gt;$ jobs&lt;/strong&gt;&amp;quot; to note down the job id of the suspended process. Then run the following command to disconnect vlc from the terminal.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bg  # to start running vlc in background
$ disown %&amp;lt;job_id&amp;gt;  # disconnect vlc from terminal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: only background processes can be disowned(or disconnected).&lt;/p&gt;

&lt;h4&gt;Cron vs. Anacron&lt;/h4&gt;

&lt;p&gt;Cron does not run crontab jobs if your computer is powered down and hence is only suitable for servers. For desktop computers however, you have an alternative namely &amp;quot;Anacron&amp;quot; which, if your computer is powered off will run any pending tasks on next boot. To use Anacron on Ubuntu, just place your shell scripts in either &lt;strong&gt;/etc/cron.daily&lt;/strong&gt;(for daily tasks) or &lt;strong&gt;/etc/cron.weekly&lt;/strong&gt;(for weekly tasks) or &lt;strong&gt;/etc/cron.monthly&lt;/strong&gt;(for monthly tasks).&lt;/p&gt;

&lt;p&gt;You could also add your entry into &lt;strong&gt;/etc/anacrontab&lt;/strong&gt;. The format of the entry is as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st field - period&lt;/strong&gt;  = time period between execution of jobs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2nd field - delay&lt;/strong&gt;   = delay after booting at which any pending jobs should run&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3rd field - job id&lt;/strong&gt;  = any unique string to identify this particular anacron job&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4th field - command&lt;/strong&gt; = command to run&lt;/p&gt;

&lt;h4&gt;Limiting CPU usage of a currently running process&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cpulimit -p &amp;lt;pid&amp;gt; -l &amp;lt;percentage_of_cpu_to_use&amp;gt; -b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-b option tells cpulimit to run in the background.&lt;/p&gt;

&lt;h4&gt;Quickly listing pid of a process along with process name&lt;/h4&gt;

&lt;p&gt;The usual command to run for this purpose is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ps ax | grep &amp;lt;process_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is however a simpler alternative&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pgrep -l &amp;lt;process_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Selectively turning off processor cores&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo 0 &amp;gt; /sys/devices/system/cpu/cpu1/online  # turn off processor core 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have a quad core computer, you can turn off cpu1, cpu2, cpu3 while cpu0 continues to work.&lt;/p&gt;

&lt;h4&gt;Making sudo not prompt for password&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo visudo  # opens /etc/sudoers in vi editor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, append the following line at the end of the file and save.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;username ALL=NOPASSWD: ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Mounting an archive like a filesystem&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ archivemount /path/to/archive /mount/point
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can perform any read/write operation on the contents of the archive. When you are done, just unmount.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ umount /mount/point
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any changes you made on the contents of the archive are automatically synced to the archive when you unmount.&lt;/p&gt;
</description>
</item>

<item>
<title>Basic dwm setup in (L)ubuntu</title>
<link>http://varunbpatil.github.com/2013/09/28/dwm</link>
<published>2013-09-28T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/09/28/dwm</guid>
<description>&lt;p&gt;&lt;strong&gt;Updated 17-Oct-2013 : Getting extra keyboard keys working with DWM&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE17OCT2013&quot;&gt;jump to this&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated 19-Aug-2014 : Getting antialiased fonts&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE19AUG2014&quot;&gt;jump to this&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Close on the heels of my &lt;a href=&quot;http://varunbpatil.github.io/2013/09/20/xmonad&quot;&gt;Xmonad setup in (L)ubuntu article&lt;/a&gt;, I decided to give &lt;strong&gt;dwm (another tiling window manager, from which xmonad is forked)&lt;/strong&gt; a try, and man was I blown away by its super simple configuration and fast setup (since it is written in C, unlike Xmonad which is written in haskell). Since I am not a power user of Xmonad, dwm more than satisfied my requirements and actually made the things that I cared for much more simpler. No more downloading a haskell compiler. dwm&amp;#39;s download, build and install is terribly fast compared to xmonad. Simply loving it so far :) Many of the key-bindings are common between dwm and xmonad, so it&amp;#39;s very easy to make the switch from xmonad to dwm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dwm.png&quot; width=&quot;750px&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;Installation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget http://dl.suckless.org/dwm/dwm-6.0.tar.gz
$ tar xf dwm-6.0.tar.gz &amp;amp;&amp;amp; cd dwm-6.0
$ make &amp;amp;&amp;amp; sudo make install
$ sudo apt-get install acpi trayer gtk-chtheme gmrun terminator dmenu #optional
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Setup&lt;/h4&gt;

&lt;p&gt;Create the file &lt;strong&gt;/usr/share/xsessions/dwm.desktop&lt;/strong&gt; with the following contents (root required).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[Desktop Entry]
Name=dwm
Comment=Lightweight tiling window manager
Exec=dwm-personalized
Type=XSession
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Give the above file proper permissions.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo chown root:root /usr/share/xsessions/dwm.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above file is required to give you the option to choose dwm as your window manager at the login prompt.&lt;/p&gt;

&lt;p&gt;Next, create the file &lt;strong&gt;/usr/local/bin/dwm-personalized&lt;/strong&gt; with the following contents (root required). Make the file executable with &lt;strong&gt;sudo chmod +x /usr/local/bin/dwm-personalized&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash
#

mpd &amp;amp;&amp;gt;/dev/null &amp;amp;
dropbox start &amp;amp;&amp;gt;/dev/null &amp;amp;
redshift -l 12.9667:77.5667 -t 3700:3700 &amp;amp;&amp;gt;/dev/null &amp;amp;
trayer --edge bottom --align right --SetDockType true \
--SetPartialStrut true --expand true --widthtype percent \
--width 100 --height 25 &amp;amp;&amp;gt;/dev/null &amp;amp;
sudo nm-applet &amp;amp;&amp;gt;/dev/null &amp;amp;
while true
do
    DATE=$(date +&amp;quot;%Y-%m-%d %I:%M&amp;quot;)
    BAT=$(acpi -b | awk &amp;#39;{ print $4 }&amp;#39; | tr -d &amp;#39;,&amp;#39;)
    xsetroot -name &amp;quot;$BAT $DATE&amp;quot;
    sleep 1m
done &amp;amp;
exec dwm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above file contains commands to autostart your favourite applications(redshift, dropbox, mpd(ncmpcpp) and the like) as well as get a system tray for some important applets(nm-applet, dropbox and the like) by using trayer (just like in the xmonad post) and display some useful info like battery percentage and date in the top bar of dwm instead of the obvious &amp;quot;dwm-6.0&amp;quot; string displayed by default.&lt;/p&gt;

&lt;p&gt;Now, let us try our hand and configuring dwm itself to suit our tastes. Remember that we have already installed dwm with the default configurations above. To re-configure dwm, you will mostly have to modify config.h and/or dwm.c and recompile and re-install dwm as below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd dwm-6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now make the necessary configuration changes in config.h and/or dwm.c . &lt;a href=&quot;http://pastebin.com/Sv3gASyA&quot;&gt;Here is my config.h&lt;/a&gt;. The helpful comments make it very easy to understand what each option is for. When you&amp;#39;re done, just recompile and re-install dwm as below&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally the most imp thing -- aesthetics. As with the basic xmonad setup, if you use dwm with just the above setup, you will find that gtk applications like Firefox look terribly ugly, but fixing this issue is simple. So, go ahead and do it before you start using dwm.&lt;/p&gt;

&lt;p&gt;Launch &lt;strong&gt;gtk-chtheme&lt;/strong&gt; and select your preferred gtk-2.0 theme and any font that catches your eye as well. Save your settings. You should now find the file &lt;strong&gt;~/.gtkrc-2.0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, let us fix some ugly gtk-3.0 apps as well. Create the file &lt;strong&gt;~/.config/gtk-3.0/settings.ini&lt;/strong&gt; with the following contents (choose your preferred themes and fonts).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[Settings]
gtk-theme-name = Lubuntu-default
gtk-icon-theme-name = Lubuntu
gtk-font-name = Ubuntu Medium 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it. Logout and log in selecting dwm as your session (instead of the default Lubuntu) at the login prompt. You are greeted with a plain screen. Press &lt;strong&gt;Win+Shift+Ret&lt;/strong&gt; to launch the &lt;strong&gt;terminal&lt;/strong&gt; or &lt;strong&gt;Win+p&lt;/strong&gt; to launch your fav apps via &lt;strong&gt;gmrun&lt;/strong&gt;. For more basic key-bindings and usage, checkout the man page of dwm.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE17OCT2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE (17 OCT 2013)&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;Getting extra keyboard keys to work with DWM&lt;/h4&gt;

&lt;p&gt;Finally got some extra keyboard keys like audio volume control keys and audio mute key working with dwm. Here is how to do it for your keyboard.&lt;/p&gt;

&lt;p&gt;First, get the hex value of keycode for the keys you are interested in. For example,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ xmodmap -pk | grep -i audio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;should give you the hex value of keycode for the audio control keys on your keyboard. For me, the values are as below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0x1008ff12 (XF86AudioMute)
0x1008ff11 (XF86AudioLowerVolume)
0x1008ff13 (XF86AudioRaiseVolume)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to modify config.h and specify what commands each of these keys will invoke when pressed. So, add the following lines to &lt;strong&gt;~/dwm-6.0/config.h&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;static const char *mutecmd[] = {&amp;quot;amixer&amp;quot;,&amp;quot;-q&amp;quot;,&amp;quot;sset&amp;quot;,&amp;quot;Master&amp;quot;,&amp;quot;toggle&amp;quot;,NULL};
static const char *lowervolcmd[] = {&amp;quot;amixer&amp;quot;,&amp;quot;-q&amp;quot;,&amp;quot;sset&amp;quot;,&amp;quot;Master&amp;quot;,&amp;quot;1%-&amp;quot;,NULL};
static const char *raisevolcmd[] = {&amp;quot;amixer&amp;quot;,&amp;quot;-q&amp;quot;,&amp;quot;sset&amp;quot;,&amp;quot;Master&amp;quot;,&amp;quot;1%+&amp;quot;,NULL};

static Key keys[] = {
    { 0,              0x1008ff12,spawn,          {.v = mutecmd } },
    { 0,              0x1008ff11,spawn,          {.v = lowervolcmd } },
    { 0,              0x1008ff13,spawn,          {.v = raisevolcmd } },
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the &lt;a href=&quot;http://pastebin.com/raw.php?i=RPka6C4H&quot;&gt;new version of my entire config.h&lt;/a&gt; with the above changes.&lt;/p&gt;

&lt;p&gt;Thats it !!!. Recompile and re-install dwm.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/dwm-6.0
$ make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test your new settings, hit &lt;strong&gt;Win+Shift+q&lt;/strong&gt;. Functionality for other keys can be added similarly.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE19AUG2014&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE (19 AUG 2014)&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;Getting antialiased fonts in dwm&lt;/h4&gt;

&lt;p&gt;Somehow, dwm does not automatically get antialiased fonts like when you are running gnome, etc. The following is the config file to enable antialiased and hinted fonts in dwm. Put the following in &lt;strong&gt;~/.fonts.conf&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE fontconfig SYSTEM &amp;quot;fonts.dtd&amp;quot;&amp;gt;
&amp;lt;fontconfig&amp;gt;
    &amp;lt;!-- Enable antialiasing for all fonts --&amp;gt;
    &amp;lt;match target=&amp;quot;font&amp;quot;&amp;gt;
        &amp;lt;edit mode=&amp;quot;assign&amp;quot; name=&amp;quot;antialias&amp;quot;&amp;gt;&amp;lt;bool&amp;gt;true&amp;lt;/bool&amp;gt;&amp;lt;/edit&amp;gt;
    &amp;lt;/match&amp;gt;
    &amp;lt;!-- Enable hinting --&amp;gt;
    &amp;lt;match target=&amp;quot;font&amp;quot;&amp;gt;
        &amp;lt;edit name=&amp;quot;hinting&amp;quot; mode=&amp;quot;assign&amp;quot;&amp;gt;&amp;lt;bool&amp;gt;true&amp;lt;/bool&amp;gt;&amp;lt;/edit&amp;gt;
    &amp;lt;/match&amp;gt;
    &amp;lt;match target=&amp;quot;font&amp;quot;&amp;gt;
        &amp;lt;edit name=&amp;quot;hintstyle&amp;quot; mode=&amp;quot;assign&amp;quot;&amp;gt;&amp;lt;const&amp;gt;hintslight&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;
    &amp;lt;/match&amp;gt;
    &amp;lt;!-- subpixel rendering --&amp;gt;
    &amp;lt;match target=&amp;quot;font&amp;quot;&amp;gt;
        &amp;lt;edit name=&amp;quot;rgba&amp;quot; mode=&amp;quot;assign&amp;quot;&amp;gt;&amp;lt;const&amp;gt;rgb&amp;lt;/const&amp;gt;&amp;lt;/edit&amp;gt;
    &amp;lt;/match&amp;gt;
&amp;lt;/fontconfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>

<item>
<title>Basic Xmonad setup in (L)ubuntu</title>
<link>http://varunbpatil.github.com/2013/09/20/xmonad</link>
<published>2013-09-20T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/09/20/xmonad</guid>
<description>&lt;p&gt;&lt;strong&gt;Updated 22-Sep-2013 : Autostart favorite applications on login&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE22SEP2013&quot;&gt;jump to this&lt;/a&gt; ]
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Updated 23-Sep-2013 : Toggling visibility of system-tray application &amp;quot;Trayer&amp;quot;&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE23SEP2013&quot;&gt;jump to this&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Xmonad is a featureful and productive tiling window manager written in Haskell. The following is a super simple setup on Lubuntu (can be setup similarly on Ubuntu based systems).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xmonad.png&quot; width=&quot;750px&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;Installation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install ghc6 libx11-dev cabal-install gmrun
$ sudo cabal update
$ sudo cabal install xmonad --global
$ sudo cabal install xmonad-contrib --global
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Setup&lt;/h4&gt;

&lt;p&gt;Create the file &lt;strong&gt;/usr/share/xsessions/xmonad.desktop&lt;/strong&gt; with the following contents (root required).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[Desktop Entry]
Name=XMonad
Comment=Lightweight tiling window manager
Exec=xmonad
Type=XSession
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Give the above file proper permissions.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo chown root:root /usr/share/xsessions/xmonad.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above file is required to give you the option to choose xmonad as your window manager at the login prompt.&lt;/p&gt;

&lt;p&gt;Next, let us configure xmonad itself. Create the file &lt;strong&gt;~/.xmonad/xmonad.hs&lt;/strong&gt; with the following contents.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import XMonad
import XMonad.Hooks.ManageDocks

main = do
    xmonad $ defaultConfig
        { modMask = mod4Mask -- make Win as mod key
        , terminal = &amp;quot;terminator&amp;quot; -- replace with your fav terminal emu
        , manageHook = manageDocks &amp;lt;+&amp;gt; manageHook defaultConfig -- ignore docks
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally the most imp thing -- aesthetics. If you use xmonad with just the above setup, you will find that gtk applications like firefox look terribly ugly, but fixing this issue is simple. So, go ahead and do it before you start using xmonad.&lt;/p&gt;

&lt;p&gt;Launch &lt;strong&gt;gtk-chtheme&lt;/strong&gt; and select your preferred gtk-2.0 theme and any font that catches your eye as well. Save your settings. You should now find the file &lt;strong&gt;~/.gtkrc-2.0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, let us fix some ugly gtk-3.0 apps as well. Create the file &lt;strong&gt;~/.config/gtk-3.0/settings.ini&lt;/strong&gt; with the following contents (choose your preferred themes and fonts).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[Settings]
gtk-theme-name = Lubuntu-default
gtk-icon-theme-name = Lubuntu
gtk-font-name = Ubuntu Medium 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it. Logout and log in selecting xmonad as your session (instead of the default Lubuntu) at the login prompt. You are greeted with a plain screen. Press &lt;strong&gt;Win+Shift+Ret&lt;/strong&gt; to launch the &lt;strong&gt;terminal&lt;/strong&gt; or &lt;strong&gt;Win+Shift+p&lt;/strong&gt; to launch your fav apps via &lt;strong&gt;gmrun&lt;/strong&gt;. For more basic keybindings and usage, checkout the man page of xmonad or head to &lt;a href=&quot;http://xmonad.org/tour.html&quot;&gt;Xmonad Official Doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might also like to have a tray for your fav applets like nm-applet | dropbox | battery status | pidgin, etc. Read on.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install trayer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a shell script &lt;strong&gt;~/.autostart&lt;/strong&gt; with execute permission with the following contents.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash

mpd &amp;amp;&amp;gt;/dev/null &amp;amp;
dropbox start &amp;amp;&amp;gt;/dev/null &amp;amp;
redshift -l 12.9667:77.5667 -t 3700:3700 &amp;amp;&amp;gt;/dev/null &amp;amp;

trayer --edge bottom --align right --SetDockType true \
--SetPartialStrut true --expand true --width 20 --height 25 &amp;amp;&amp;gt;/dev/null &amp;amp;

sleep 1
nm-applet --sm-disable &amp;amp;&amp;gt;/dev/null &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I am using this script to start a few applications I use frequently like mpd(ncmpcpp), dropbox, redshift.&lt;/p&gt;

&lt;p&gt;Then, I am creating a tray with trayer, and then launching nm-applet which I can then access from the tray which is visible on all workspaces (Win+1 to Win+9) courtesy of the managehook in our xmonad.hs configuration file.&lt;/p&gt;

&lt;p&gt;At the moment, I am using this shell script to launch apps manually after logging into xmonad. My attempts at using .xinitrc or .xsession to automate the same have failed. I would appreciate it if anyone could point me in the right direction. I will keep this page updated as and when I find something new and noteworthy.&lt;/p&gt;

&lt;p&gt;Comments and feedback and tips|tricks are welcome.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE22SEP2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE SEP 22&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;@kasbah&lt;/strong&gt; for providing a solution to automate the startup of my fav applications in the comments below, which I provide here for completeness. The following is my new &lt;strong&gt;xmonad.hs&lt;/strong&gt; to autostart applications.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import System.IO

main = do
    xmonad $ defaultConfig
        { modMask = mod4Mask
        , terminal = &amp;quot;terminator&amp;quot;
        , manageHook = manageDocks &amp;lt;+&amp;gt; manageHook defaultConfig
        , startupHook = startup
        } `additionalKeys`
        [ ((mod4Mask, xK_q), spawn &amp;quot;killall redshift nm-applet trayer&amp;quot;
          &amp;gt;&amp;gt; restart &amp;quot;xmonad&amp;quot; True)
        ]

startup :: X()
startup = do
    spawn &amp;quot;mpd&amp;quot;
    spawn &amp;quot;dropbox start&amp;quot;
    spawn &amp;quot;redshift -l 12.9667:77.5667 -t 3700:3700&amp;quot;
    spawn &amp;quot;trayer --edge bottom --align right --SetDockType true
           --SetPartialStrut true --expand true --widthtype percent
           --width 100 --height 25&amp;quot;
    spawn &amp;quot;nm-applet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is basically using the startupHook concept to start applications after xmonad loads. The problem with using startupHook alone is that the applications are (re)started everytime I reload the xmonad config with Win+q. To overcome this limitation, I have rebinded Win+q to first kill the applications that I autostarted before restarting xmonad itself.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE23SEP2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE SEP 23&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The problem with the above xmonad config is that the trayer gets blocked by open apps. To use the trayer applets, you will have to go to an empty workspace (with no open apps). To overcome this limitation, use the xmonad.hs below which sets the strut option for trayer and then asks xmonad not to block struts with the application windows. There is also a keybinding &lt;strong&gt;Win+b&lt;/strong&gt; to toggle the struts(toggle the display of trayer), thus making trayer accessible even when other apps are open.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import System.IO

main = do
    xmonad $ defaultConfig
        { modMask = mod4Mask
        , terminal = &amp;quot;terminator&amp;quot;
        , manageHook = manageDocks &amp;lt;+&amp;gt; manageHook defaultConfig
        , layoutHook = avoidStruts  $  layoutHook defaultConfig
        , startupHook = startup
        } `additionalKeys`
        [ ((mod4Mask, xK_q), spawn &amp;quot;sudo killall redshift nm-applet trayer&amp;quot;
          &amp;gt;&amp;gt; restart &amp;quot;xmonad&amp;quot; True)
        , ((mod4Mask, xK_z), spawn &amp;quot;slock&amp;quot;)
        , ((mod4Mask, xK_b), sendMessage ToggleStruts)
        ]

startup :: X()
startup = do
    spawn &amp;quot;mpd&amp;quot;
    spawn &amp;quot;dropbox start&amp;quot;
    spawn &amp;quot;redshift -l 12.9667:77.5667 -t 3700:3700&amp;quot;
    spawn &amp;quot;trayer --edge bottom --align right --SetDockType true
           --SetPartialStrut true --expand true --widthtype percent
           --width 100 --height 25&amp;quot;
    spawn &amp;quot;sudo nm-applet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>

<item>
<title>EOM a.k.a End of Mail a.k.a Emacs + offlineimap + mu4e</title>
<link>http://varunbpatil.github.com/2013/08/19/eom</link>
<published>2013-08-19T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/08/19/eom</guid>
<description>&lt;p&gt;Here is how to install and configure emacs + offlineimap + mu4e for a complete email client (including instructions for multiple accounts).&lt;/p&gt;

&lt;h4&gt;What do each of them do ?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;offlineimap&lt;/strong&gt;, as the name implies, is used to fetch mail from the mail server into a local folder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mu4e&lt;/strong&gt;, is an emacs package that is built over &amp;quot;mu&amp;quot;, and is used to index emails already downloaded using offlineimap, for quick searching.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emacs&lt;/strong&gt; is obviously where mu4e can be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Fetching email using offlineimap&lt;/h4&gt;

&lt;p&gt;Let us first install offlineimap as below&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone git://github.com/OfflineIMAP/offlineimap.git
$ cd offlineimap
$ make
$ sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Installation should be very quick. Let us now configure offlineimap for use with gmail(multiple accounts are discussed later).&lt;/p&gt;

&lt;p&gt;Create the file ~/.offlineimaprc with the following contents.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[general]
accounts = Gmail
maxsyncaccounts = 3

[Account Gmail]
localrepository = GmailLocal
remoterepository = GmailRemote

[Repository GmailLocal]
type = Maildir
localfolders = ~/Maildir/Gmail

[Repository GmailRemote]
type = IMAP
remotehost = imap.gmail.com
remoteuser = youremail@gmail.com
remotepass = yourpassword
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
maxconnections = 1
realdelete = yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace youremail and yourpassword with your actual gmail userid and password. Next create a directory to store your emails locally.&lt;/p&gt;

&lt;p&gt;Needless to say, make ~/.offlineimaprc readable by only you (chmod go-rwx ~/.offlineimaprc) since it contains plain-text password.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir -p ~/Maildir/Gmail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is it. You are ready to fetch email. Run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~ &amp;amp;&amp;amp; offlineimap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first time is going to take long depending on the number of emails you have on the server. Subsequent times are much quicker fetching incrementally.&lt;/p&gt;

&lt;h4&gt;Installing mu4e&lt;/h4&gt;

&lt;p&gt;On Ubuntu based distros, mu4e along with the base &amp;quot;mu&amp;quot; program can be installed with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install mu4e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us now go ahead and index the emails for fast searching.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mu index --maildir=~/Maildir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command is not actually required to be run standalone. mu4e does it for you within emacs when you ask it to refresh emails. Anyway lets do it to confirm that things are working as intended.&lt;/p&gt;

&lt;h4&gt;Setting up emacs as an email client&lt;/h4&gt;

&lt;p&gt;Finally, we need to setup emacs as an email client that uses mu4e. But first, let us install a few other programs that emacs needs for rendering emails and sending emails.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install gnutls-bin html2text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let us configure emacs. Add the following to your emacs init file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(require &amp;#39;mu4e)
(require &amp;#39;smtpmail)

(setq mu4e-drafts-folder &amp;quot;/Gmail/[Gmail].Drafts&amp;quot;
      mu4e-sent-folder   &amp;quot;/Gmail/[Gmail].Sent Mail&amp;quot;
      mu4e-trash-folder  &amp;quot;/Gmail/[Gmail].Trash&amp;quot;
      mu4e-sent-messages-behavior &amp;#39;delete
      mu4e-get-mail-command &amp;quot;offlineimap&amp;quot;
      mu4e-update-interval 60
      user-mail-address &amp;quot;youremail@gmail.com&amp;quot;
      user-full-name  &amp;quot;yourname&amp;quot;
      mu4e-maildir-shortcuts
            &amp;#39;( (&amp;quot;/Gmail/INBOX&amp;quot;               . ?i)
               (&amp;quot;/Gmail/[Gmail].Sent Mail&amp;quot;   . ?s)
               (&amp;quot;/Gmail/[Gmail].Trash&amp;quot;       . ?t)
               (&amp;quot;/Gmail/[Gmail].All Mail&amp;quot;    . ?a))

     message-send-mail-function &amp;#39;smtpmail-send-it
     smtpmail-stream-type &amp;#39;starttls
     smtpmail-default-smtp-server &amp;quot;smtp.gmail.com&amp;quot;
     smtpmail-smtp-server &amp;quot;smtp.gmail.com&amp;quot;
     smtpmail-smtp-service 587
     message-kill-buffer-on-exit t)

(setq mu4e-view-show-images t)
(when (fboundp &amp;#39;imagemagick-register-types)
  (imagemagick-register-types))
(setq mu4e-view-prefer-html t)
(setq mu4e-html2text-command &amp;quot;html2text -utf8 -width 72&amp;quot;)
(setq mail-user-agent &amp;#39;mu4e-user-agent)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is it. Reload your emacs config. Launch mu4e from Alt-x list. You will be presented with the mu4e main view which shows the key bindings for some of the most used operations, which I have listed below for the sake of completion.&lt;/p&gt;

&lt;h4&gt;Some imp key bindings&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;j&amp;lt;char&amp;gt; - jump to a particular folder within Maildir
jo      - ask for which directory within Maildir to enter
U       - refresh emails
C       - Compose email
s       - search
bu      - view unread messages
q       - quit any view
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the headers view (view which lists all your emails inside a particular folder), the following key bindings are useful.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;n       - next email
p       - prev email
y       - toggle between headers view and the message view
          (which shows the email contents)
d       - mark email for moving to trash
D       - mark email for deleting permanently
!       - mark email as read
?       - mark email as unread
+,-     - star an email
t       - only mark current thread
T       - mark whole thread
x       - apply all marked actions
e       - extract attachments(saved to ~/ by default)
R       - reply to email
C-S-u   - refresh email
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a single account setup and running like charm, let us add another account to the mix.&lt;/p&gt;

&lt;h4&gt;Managing multiple accounts&lt;/h4&gt;

&lt;p&gt;Modify your ~/.offlineimaprc as below, to include Account2.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[general]
accounts = Gmail, Account2
maxsyncaccounts = 3

[Account Gmail]
localrepository = GmailLocal
remoterepository = GmailRemote

[Repository GmailLocal]
type = Maildir
localfolders = ~/Maildir/Gmail

[Repository GmailRemote]
type = IMAP
remotehost = imap.gmail.com
remoteuser = youremail
remotepass = yourpassword
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
maxconnections = 1
realdelete = yes

[Account Account2]
localrepository = Account2Local
remoterepository = Account2Remote

[Repository Account2Local]
type = Maildir
localfolders = ~/Maildir/Account2

[Repository Account2Remote]
type = IMAP
remotehost = mail.xyz.com
remoteuser = youremail
remotepass = yourpassword
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
maxconnections = 1
realdelete = yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fetch your emails.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir -p ~/Maildir/Account2
$ cd ~ &amp;amp;&amp;amp; offlineimap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Index them (not compulsory)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mu index --maildir=~/Maildir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify your emacs init file as below to include the second account.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(require &amp;#39;mu4e)
(require &amp;#39;smtpmail)

(setq mu4e-drafts-folder &amp;quot;/Gmail/[Gmail].Drafts&amp;quot;
      mu4e-sent-folder   &amp;quot;/Gmail/[Gmail].Sent Mail&amp;quot;
      mu4e-trash-folder  &amp;quot;/Gmail/[Gmail].Trash&amp;quot;
      mu4e-sent-messages-behavior &amp;#39;delete
      mu4e-get-mail-command &amp;quot;offlineimap&amp;quot;
      mu4e-update-interval 60
      user-mail-address &amp;quot;youremail@gmail.com&amp;quot;
      user-full-name  &amp;quot;yourname&amp;quot;
      mu4e-maildir-shortcuts
            &amp;#39;( (&amp;quot;/Gmail/INBOX&amp;quot;               . ?i)
               (&amp;quot;/Gmail/[Gmail].Sent Mail&amp;quot;   . ?s)
               (&amp;quot;/Gmail/[Gmail].Trash&amp;quot;       . ?t)
               (&amp;quot;/Gmail/[Gmail].All Mail&amp;quot;    . ?a)
               (&amp;quot;/Account2/INBOX&amp;quot;            . ?k)
               (&amp;quot;/Account2/Sent Items&amp;quot;       . ?x)
               (&amp;quot;/Account2/Trash&amp;quot;            . ?f))

     message-send-mail-function &amp;#39;smtpmail-send-it
     smtpmail-stream-type &amp;#39;starttls
     smtpmail-default-smtp-server &amp;quot;smtp.gmail.com&amp;quot;
     smtpmail-smtp-server &amp;quot;smtp.gmail.com&amp;quot;
     smtpmail-smtp-service 587
     message-kill-buffer-on-exit t)

;; define only variables that differ for the two accounts
(defvar my-mu4e-account-alist
  &amp;#39;((&amp;quot;Gmail&amp;quot;
     (mu4e-drafts-folder &amp;quot;/Gmail/[Gmail].Drafts&amp;quot;)
     (mu4e-sent-folder   &amp;quot;/Gmail/[Gmail].Sent Mail&amp;quot;)
     (mu4e-trash-folder  &amp;quot;/Gmail/[Gmail].Trash&amp;quot;)
     (user-mail-address  &amp;quot;youremail@gmail.com&amp;quot;)
     (smtpmail-default-smtp-server &amp;quot;smtp.gmail.com&amp;quot;)
     (smtpmail-smtp-server &amp;quot;smtp.gmail.com&amp;quot;)
     (smtpmail-smtp-service 587))
    (&amp;quot;Cisco&amp;quot;
     (mu4e-drafts-folder &amp;quot;/Account2/Drafts&amp;quot;)
     (mu4e-sent-folder   &amp;quot;/Account2/Sent Items&amp;quot;)
     (mu4e-trash-folder  &amp;quot;/Account2/Trash&amp;quot;)
     (user-mail-address  &amp;quot;youremail@abc.com&amp;quot;)
     (smtpmail-default-smtp-server &amp;quot;outgoing.server.com&amp;quot;)
     (smtpmail-smtp-server &amp;quot;outgoing.server.com&amp;quot;)
     (smtpmail-smtp-service 25))))

(defun my-mu4e-set-account ()
  &amp;quot;Set the account for composing a message.&amp;quot;
  (let* ((account
    (if mu4e-compose-parent-message
      (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
        (string-match &amp;quot;/\\(.*?\\)/&amp;quot; maildir)
        (match-string 1 maildir))
        (completing-read (format &amp;quot;Compose with account: (%s) &amp;quot;
          (mapconcat #&amp;#39;(lambda (var) (car var)) my-mu4e-account-alist &amp;quot;/&amp;quot;))
          (mapcar #&amp;#39;(lambda (var) (car var)) my-mu4e-account-alist)
          nil t nil nil (caar my-mu4e-account-alist))))
        (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (if account-vars
        (mapc #&amp;#39;(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error &amp;quot;No email account found&amp;quot;))))

(add-hook &amp;#39;mu4e-compose-pre-hook &amp;#39;my-mu4e-set-account)

(setq mu4e-view-show-images t)
(when (fboundp &amp;#39;imagemagick-register-types)
  (imagemagick-register-types))
(setq mu4e-view-prefer-html t)
(setq mu4e-html2text-command &amp;quot;html2text -utf8 -width 72&amp;quot;)
(setq mail-user-agent &amp;#39;mu4e-user-agent)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify your email address and the outgoing mail server accordingly. You are ready to roll. Reload your emacs config and M-x mu4e to start working with your emails from both accounts. You can extend your emacs init file and .offlineimaprc to include more accounts accordingly.&lt;/p&gt;

&lt;p&gt;Any suggestions, queries, improvements are welcome.&lt;/p&gt;
</description>
</item>

<item>
<title>First attempt at developing a Firefox addon</title>
<link>http://varunbpatil.github.com/2013/08/12/firefox-addon</link>
<published>2013-08-12T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/08/12/firefox-addon</guid>
<description>&lt;p&gt;This is my first ever Firefox addon. Doesn&amp;#39;t do much at the moment. If you install it, you will find a button on the navigation bar. Clicking on it opens up my blog&amp;#39;s home page in a new tab :). Looking to add more features in the coming days.&lt;/p&gt;

&lt;h4&gt;Installation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~
$ wget https://github.com/varunbpatil/firefox_addon/raw/master/varun_blog.xpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Goto Firefox -&amp;gt; Add-ons. Click the spanner icon on the top right beside the search box. Select &amp;quot;install add-on from file&amp;quot; and choose the file you downloaded with the above command from your home folder. There is no need to restart Firefox to start using this addon. Enjoy :)&lt;/p&gt;

&lt;p&gt;The project page can be found at &lt;a href=&quot;https://github.com/varunbpatil/firefox_addon&quot;&gt;https://github.com/varunbpatil/firefox_addon&lt;/a&gt;&lt;/p&gt;
</description>
</item>

<item>
<title>Bash script to perform super-fast file transfer using netcat and tar</title>
<link>http://varunbpatil.github.com/2013/08/05/ncp</link>
<published>2013-08-05T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/08/05/ncp</guid>
<description>&lt;p&gt;&lt;strong&gt;Updated 06-Aug-2013 : Script updated to transfer multiple files in single command&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE06AUG2013&quot;&gt;jump to this&lt;/a&gt; ]
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Updated 14-Oct-2013 : Minor performance improvements in script&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE14OCT2013&quot;&gt;jump to this&lt;/a&gt; ]
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Updated 01-Nov-2013 : Better command line options, better error reporting&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE01NOV2013&quot;&gt;jump to this&lt;/a&gt; ]
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Updated 05-Feb-2014 : Upgrade script to use netcat6, remove dependency on &amp;#39;screen&amp;#39;, auto compression for text files&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE05FEB2014&quot;&gt;jump to this&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;I frequently transfer several GB&amp;#39;s of data between my work and home laptops. Pendrives are useless because of the amount of data that I have to transfer and their speed is unbearable. That is when I discovered that netcat and tar is one of the fastest ways to transfer data across a network. The problem with this is that it requires one command to be run on the source machine and one command to be run on the destination machine. When was the last time you ran a command on the destination machine just to copy a file from the source. This is cumbersome. So, I designed &lt;a href=&quot;http://pastebin.com/raw.php?i=HUqz7u1y&quot;&gt;this bash shell script&lt;/a&gt; which makes the process of using netcat and tar for file transfer almost similar to scp or rsync on linux. So, there is no need to run any command seperately on the source and destination, just one command on the source side to do the job.&lt;/p&gt;

&lt;p&gt;This script is not perfect... Currently, it is only able to transfer a single directory (all contents of directory) or a single file in one invocation of the script. I am working on making it as close as possible to scp command on linux. Do check back on this page for updates.&lt;/p&gt;

&lt;p&gt;For those wondering how I transfer files over the network between two computers running Linux, here it is. Connect the two laptops via ethernet cable. Then, under IPv4 settings for ethernet connection, change method to &amp;quot;Manual&amp;quot;. Then under &amp;quot;Addresses&amp;quot;, click &amp;quot;Add&amp;quot;. For computer A, enter (Address, Netmask) as (10.0.0.1, 255.255.255.0) and for computer B (10.0.0.2, 255.255.255.0). Save your settings. Unplug and plug in the ethernet cable on any one computer and you should automatically have ethernet connection established.&lt;/p&gt;

&lt;p&gt;Now, let us enable passwordless ssh login from one computer to the other so that you don&amp;#39;t have to enter the password of the other machine every time you use this script. On computer A, run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Press &amp;#39;Enter&amp;#39; for all questions.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ssh-copy-id username_on_computer_B@10.0.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted for a password. Enter the password of the user &amp;quot;username&lt;em&gt;on&lt;/em&gt;computer_B&amp;quot; on Computer B. Next, test whether you are able to login to Computer B without password.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ssh username_on_computer_B@10.0.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command should not prompt you for password. If this step is done, perform the same exact steps on Computer B, as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ssh-keygen -t rsa
$ ssh-copy-id username_on_computer_A@10.0.0.1
$ ssh username_on_computer_A@10.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, passwordless login should work for computer A to computer B and vice versa.&lt;/p&gt;

&lt;p&gt;Now, you are ready to use the bash shell script to perform a netcat+tar file transfer at blazing speeds.&lt;/p&gt;

&lt;p&gt;Oh, almost forgot, your computers will require some additional software not installed by default.&lt;/p&gt;

&lt;p&gt;On source and destination computers, you will need to install netcat, pv and screen, like below (Ubuntu)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install netcat pv screen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, you are surely ready to use the shell script as follows&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~
$ wget http://pastebin.com/raw.php?i=HUqz7u1y -O ncp.sh
$ chmod +x ncp.sh
$ ./ncp.sh source_dir_or_file username_on_computer_B@10.0.0.2:dest_dir 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument is a single source directory or a single source file on Computer A that you want to transfer to computer B. The second argument is the username, ip_addr and target folder of the destination machine(Computer B in this case) which is similar to the syntax used in scp or rsync. The last argument tells whether or not to use compression while transferring files (1 to use compression, 0 to not use compression).&lt;/p&gt;

&lt;p&gt;The last argument (enable or disable compression) is a very important that affects data transfer speeds and time taken for data transfer. For video or music files which are already compressed, there is no point in enabling compression in the command. This will simply increase CPU usage to compress data that cannot be compressed much more and thus will decrease network transfer speeds. However, you can enable compression while transferring text files (which can be compressed massively) thus yielding a smaller amount of data that needs to be transferred which inturn decreases transfer time. Without compression, you should see about 100Mbps of transfer speeds indicated over ethernet.&lt;/p&gt;

&lt;p&gt;Let me know if you think of any useful additions to the script or anything that can be improved.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE06AUG2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE(06-AUG-2013)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The script has been updated to transfer multiple src files and/or directories to the destination in a single invocation of the command.&lt;/p&gt;

&lt;p&gt;So, you could use the command like below&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./ncp.sh src_file1 src_file2 ... username_on_computer_B@10.0.0.2:dest_dir 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a id=&quot;UPDATE14OCT2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE(14-OCT-2013)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some minor performance improvements when transferring multiple files at one go using the script. Transferring the shell script that set&amp;#39;s up netcat on the remote machine only once and using the same script the next time. This should save on the time needed to a scp transfer of the shell script.&lt;/p&gt;

&lt;p&gt;The new version of the script can be obtained using&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget http://pastebin.com/raw.php?i=0WszhTKh -O ncp.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the other options remain the same as before.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE01NOV2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE(01-NOV-2013)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have updated the ncp shell script with better command line options handled using getopt, so you no longer need to explicitly specify
a &amp;#39;0&amp;#39; at the end of the command to disable compression. &lt;strong&gt;Compression is now disabled by default&lt;/strong&gt; for the command, and you only need to give the &lt;strong&gt;&amp;#39;-c&amp;#39; option&lt;/strong&gt; to the command &lt;strong&gt;if you want to enable compression&lt;/strong&gt;. There is also a new &lt;strong&gt;man page like help&lt;/strong&gt; that you can get with the &lt;strong&gt;&amp;#39;-h&amp;#39; option&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, here is how to use the latest version of the ncp script.&lt;/p&gt;

&lt;p&gt;Download latest version of ncp script&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget http://pastebin.com/raw.php?i=c4yVeA62 -O ncp.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;View command usage with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./ncp.sh -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data transfer with compression enabled&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./ncp.sh -c src_file1 src_file2 ... username_on_computer_B@10.0.0.2:dest_dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data transfer without compression&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./ncp.sh src_file1 src_file2 ... username_on_computer_B@10.0.0.2:dest_dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a id=&quot;UPDATE05FEB2014&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE(05-FEB-2014)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have updated the ncp script to use netcat6 (nc6). netcat6 can be installed in Ubuntu with the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install netcat6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a result of moving to netcat6, you no longer need to have &amp;#39;screen&amp;#39; installed on the destination machine to use this script.&lt;/p&gt;

&lt;p&gt;Also, when the script is run without the compression option (i.e, without -c option), the script tries to automatically detect the type of file that is being transferred (using the linux &amp;#39;file&amp;#39; command) and auto enables compression only if it is a text file (as text files usually benefit the most by compression). Thus, when the script is run without any options, it provides arguably the best possible data transfer times (by enabling compression for text files and disabling compression for other types of files) automatically. Ofcourse, if the -c option is provided, then every file that is transferred will be compressed.&lt;/p&gt;

&lt;p&gt;To download the latest version of the ncp script,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget http://pastebin.com/raw.php?i=VyHeasH0 -O ncp.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usage of the shell script remains same as the previous version.&lt;/p&gt;
</description>
</item>

<item>
<title>Jekyll : Handling Github page build failure and Jekyll plugins on Github</title>
<link>http://varunbpatil.github.com/2013/07/06/jekyll-build-fail</link>
<published>2013-07-06T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/07/06/jekyll-build-fail</guid>
<description>&lt;p&gt;&lt;strong&gt;Updated 18-Nov-2013 : publish.sh script updated to publish a specific commit&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE18NOV2013&quot;&gt;jump to this&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;I recently got the shock of my life when I could no longer publish new posts on my website since jekyll build on Github was failing possibly due to an upgrade of jekyll version that Github uses to build jekyll sites. However I observed that I was able to build my site locally without any problems. After some investigation into the problem, I found that I could build my site locally rather that have Github build it for me, and thus overcome these Github page build failures. I also found out that this method can be used to maintain a jekyll site that uses jekyll plugins which Github won&amp;#39;t build for you (jekyll plugins are not allowed on Github pages). Here is a very simple step-by-step solution to the problem, with zero down-time for your jekyll site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First you need to create a new branch on Github to hold your site&amp;#39;s source code. Currently, this is your master branch on Github. Let us move it to another branch called source.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git checkout -b source master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command creates another branch called source which mirrors your current master branch. Essentially we are making a copy of the history on your master branch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go ahead and push this new branch to Github&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push -u origin source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, if you login to your Github account and browse the repository which holds your jekyll site, you should see two branches(master and source).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now, make source as your default branch on Github by entering the repository specific settings which you can see to the right of repository file listing on Github. This is done so that, anybody visiting your repository on Github will see the source code for your site(which is on the source branch) and not the pre-built jekyll site(which we will eventually push to the master branch). Also, anyone who clones your repository will get the source branch automatically checked out instead of the pre-built HTML that is on your master branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, coming to your master branch, which currently holds the source for your jekyll site. The master branch will now contain the pre-built HTML that you built locally. Building your site locally and pushing the HTML to the master branch of your Github repository is pretty easy, but it easily becomes frustrating when you have to do it everytime you make a change to your site or add a new post. So, I have created a &lt;a href=&quot;https://github.com/varunbpatil/varunbpatil.github.com/blob/source/publish.sh&quot;&gt;small shell script&lt;/a&gt; which does just that in a single command and which I use to publish new posts on this website.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do make the necessary changes to the shell script such as the actual jekyll command that you use to build your site locally(on line  12) and the name of your Github repository(on line 21).&lt;/p&gt;

&lt;p&gt;Push your modified publish.sh shell script to the source branch of your repository so that you always have the script where you need it. Now, publishing any new posts or making any changes to your site is as simple as the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd &amp;lt;your_local_clone_of_github_repo&amp;gt;
$ ./publish.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sit back and enjoy while your jekyll site is built and pushed to the master branch, and thus served to the masses with no problem at all.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE18NOV2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE(18-NOV-2013)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I see two advantages to this method compared to pushing to master.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No dependency on GitHub&amp;#39;s jekyll build system&lt;/strong&gt;. As long as you are able to &amp;quot;jekyll serve&amp;quot; your webpage on your local machine, you can be sure that is what you will see on your github site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having a seperate branch just for your sources allows you to &lt;strong&gt;commit partial articles&lt;/strong&gt; which you can resume writing another time possibly on another computer. And you can be sure that GitHub won&amp;#39;t try to build your partial articles and serve them. To accomplish this, I have updated my publish.sh script(see link above) to publish only the commit you specify(instead of the HEAD commit). And the new publish.sh script also ignores all untracked files and uncommitted changes while publishing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how to use the new publish.sh script&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd &amp;lt;your_local_clone_of_github_repo&amp;gt;
$ ./publish.sh &amp;lt;optional_commit_sha1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;#39;t specify the commit SHA1 which you want to specifically publish, the HEAD commit is taken as the default.&lt;/p&gt;
</description>
</item>

<item>
<title>Emacs newbie cheat sheet -- from a vim convert</title>
<link>http://varunbpatil.github.com/2013/05/26/emacs-newbie</link>
<published>2013-05-26T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/05/26/emacs-newbie</guid>
<description>&lt;p&gt;More than a month since my last post, I had to write something. What better to write about than the editor that I tried so hard to learn several times in the past but gave up each time because vim was so much simpler on my brain and my fingers. Nevertheless, I persisted and finally accumulated enough skill to use emacs as my primary editor for all tasks. Although I am light years away from becoming a emacs guru (not that I was a vim guru either :P), the links in this post will help an emacs newbie or a vim convert like me to run before we can learn to walk (if you know what I mean... If you don&amp;#39;t, just know that I was watching Iron Man 3 before I started writing this post... Now you know what I mean.. YEAH).&lt;/p&gt;

&lt;p&gt;Back on topic, emacs can be daunting for any newbie, more so for a hardened vim user. The hardest problem for an emacs newbie is to know where to start. This was the reason I couldn&amp;#39;t bring myself to learn emacs for a long long time. I was aware that there are many excellent vim emulators for emacs, but I wanted a vanilla emacs experience. In the end, I had emacs under my belt (thanks to a few unproductive days at work). I started of with a &lt;a href=&quot;https://github.com/eschulte/emacs24-starter-kit&quot;&gt;base emacs24 configuration&lt;/a&gt; which gave a solid platform to start. Then, I started building my cheat sheet (that I will share with you in this post) as a way to remember useful emacs features. I scoured the internet to find emacs key-bindings for every vim feature that I had grown so accustomed to. I basically wanted to accomplish everything that I could with vim with emacs instead. I thought I could share some of what I have learned via this post. I have to admit, the cheat sheet that I am going to share with you is not professional or neat, but sure as hell is functional (it works for me). My advice would be to take whatever you can from this cheat sheet and create one of your own, your way. &lt;strong&gt;The rest of this post assumes you are running emacs24&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;How to run before you can walk&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~ ; git clone git@github.com:varunbpatil/emacs_config.git
$ mv emacs_config .emacs.d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is it... You are good to start playing in emacs.&lt;/p&gt;

&lt;p&gt;The git repository that you just cloned contains a &lt;strong&gt;README&lt;/strong&gt; file which also happens to be my unprofessional, unaesthetic, yet functional cheat sheet that I promised to share.&lt;/p&gt;

&lt;p&gt;You can also find the same &lt;a href=&quot;https://raw.github.com/varunbpatil/emacs_config/master/README&quot;&gt;emacs24 newbie cheat sheet in raw text here&lt;/a&gt; for quick viewing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A word of caution&lt;/strong&gt; : Some of the key-bindings mentioned in my cheat sheet are not part of vanilla emacs... They were defined by me in my emacs configuration to make my life simpler. Feel free to go through &amp;quot;~/.emacs.d/starter-kit.el&amp;quot; where you will find the implementation for these custom key-bindings.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Feel free to drop me a *message* below if you don&amp;#39;t understand something in my cheat sheet or god forbid, find something totally wrong in my cheat sheet or have a better way of doing something or feel like contributing to my emacs gyan or feel like cursing me for all things emacs.&lt;/p&gt;

&lt;p&gt;Most importantly, do check back on this post for more emacs pointers as my emacs gyan continues to grow by the day :)&lt;/p&gt;
</description>
</item>

<item>
<title>ncmpcpp : ncurses based music player for Linux</title>
<link>http://varunbpatil.github.com/2013/04/11/ncmpcpp</link>
<published>2013-04-11T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/04/11/ncmpcpp</guid>
<description>&lt;p&gt;One of my previous post detailed a program called &amp;quot;task warrior&amp;quot; which has made managing my todo list from the console easier. Now, another CLI program called &lt;strong&gt;ncmpcpp&lt;/strong&gt; is satisfying my music needs very well. However, I had a hard time setting it up and getting it to detect any of my music files as the instructions on several forums were outdated. This article will get you up and listening using ncmpcpp in no time. Hope you enjoy using it as much as I do.&lt;/p&gt;

&lt;h4&gt;Installation&lt;/h4&gt;

&lt;p&gt;On Ubuntu/Debian&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install mpd mpc ncmpcpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Arch&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo pacman -S mpd mpc ncmpcpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;mpd&lt;/strong&gt; stands for &lt;strong&gt;music player daemon&lt;/strong&gt;. It is a daemon(or server) running in the background and managing your music collection. &lt;strong&gt;ncmpcpp&lt;/strong&gt; is a client for mpd.&lt;/p&gt;

&lt;h4&gt;Configuring Music Player Daemon (mpd)&lt;/h4&gt;

&lt;p&gt;One of the drawbacks of ncmpcpp is that it is a pain to configure and get it running correctly. However, the following instructions should hopefully make it a walk in the park.&lt;/p&gt;

&lt;p&gt;Create the following file and directories for mpd&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir -p ~/.mpd/playlists
$ touch ~/.mpd/{database,log,mpd.conf,pid,state}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, you will need to populate the mpd.conf (mpd configuration file). Most installations of mpd will provide an example mpd configuration file which you can use/modify according to your needs.&lt;/p&gt;

&lt;p&gt;On Ubuntu/Debian, the example mpd configuration file (compressed form) can be found at &lt;strong&gt;/usr/share/doc/mpd/examples/mpd.conf.gz&lt;/strong&gt;. You will have to extract the file mpd.conf from mpd.conf.gz.&lt;/p&gt;

&lt;p&gt;On Arch, the example configuration file is &lt;strong&gt;/usr/share/doc/mpd/mpdconf.example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copy this example mpd configuration file to ~/.mpd and rename it to mpd.conf (if it is not already so).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# for Ubuntu/Debian
$ cp /usr/share/doc/mpd/examples/mpd.conf.gz ~/.mpd/
$ cd ~/.mpd
$ gunzip mpd.conf.gz

# for Arch
$ cp /usr/share/doc/mpd/mpdconf.example ~/.mpd/mpd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let us edit ~/.mpd/mpd.conf to suit our needs. Some of the most basic mpd configuration options that need to be enabled(uncomment in mpd.conf) are as below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;music_directory         &amp;quot;~/Music&amp;quot;   # path to your Music directory
playlist_directory      &amp;quot;~/.mpd/playlists&amp;quot;
db_file             &amp;quot;~/.mpd/database&amp;quot;
log_file            &amp;quot;~/.mpd/log&amp;quot;
pid_file            &amp;quot;~/.mpd/pid&amp;quot;
state_file          &amp;quot;~/.mpd/state&amp;quot;

audio_output {
    type        &amp;quot;alsa&amp;quot;
    name        &amp;quot;any name for your alsa device&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can change &amp;quot;alsa&amp;quot; in the audio_output above to &amp;quot;pulse&amp;quot;, if you are using pulse audio.&lt;/p&gt;

&lt;p&gt;You are now done configuring the Music Player Daemon(mpd). You can use mpd to listen to your favorite music from the command line. mpd supports several options to control your music collections (man mpd). If however, you are looking for a ncurses interface via ncmpcpp, read on...&lt;/p&gt;

&lt;h4&gt;Configuring ncmpcpp&lt;/h4&gt;

&lt;p&gt;Let us now configure ncmpcpp as a mpd client. Create the following files and folders.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir ~/.ncmpcpp
$ touch ~/.ncmpcpp/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;~/.ncmpcpp/config is the ncmpcpp configuration file (the configuration file for the ncurses music player). There are several things that can be configured here that controls the ncmpcpp music player itself, but let&amp;#39;s keep it simple.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;#39;mpd_music_dir = &amp;quot;~/Music&amp;quot;&amp;#39; &amp;gt; ~/.ncmpcpp/config  # path to mpd music dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, that&amp;#39;s it... You have successfully configured ncmpcpp to work with mpd.    &lt;/p&gt;

&lt;p&gt;Now, all that&amp;#39;s left is to make mpd autostart on login. For this, you need to edit your distro specific autostart file.&lt;/p&gt;

&lt;h4&gt;Making mpd autostart on login&lt;/h4&gt;

&lt;p&gt;On Ubuntu/Debian, create a desktop file in &lt;strong&gt;~/.config/autostart/&lt;/strong&gt;. Let us name it &lt;strong&gt;mpd.desktop&lt;/strong&gt;. Add the following lines to this file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[Desktop Entry]
Encoding=UTF-8
Type=Application
Name=Music Player Daemon
Comment=Server for playing audio files
Exec=mpd
StartupNotify=false
Terminal=false
Hidden=false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On ArchBang, edit the file ~/.config/openbox/autostart and append a single line as follows&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;quot;mpd&amp;quot; &amp;gt;&amp;gt; ~/.config/openbox/autostart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it!!! The next time you restart your computer, mpd should already be running in the background, and you can launch ncmpcpp from the terminal anytime to listen to your fav music. The first time you launch ncmpcpp, you might not know all the keyboard shortcuts to manage you music collection. You are better of &lt;strong&gt;pressing &amp;#39;1&amp;#39;&lt;/strong&gt; to list all the keyboard shortcuts available. However, the following are some shortcuts you might need frequently, to get you rolling quickly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;q = quit ncmpcpp
u = update music database
1-10 = ncmpcpp screens # help, playlist, browse, search, etc
j,k = move down, move up
enter = add song to playlist and start playing the song
space = add song to playlist
d = delete song from playlist
c = clear entire playlist
s = stop playback
P = pause/continue playback
&amp;gt; = next track in playlist
&amp;lt; = previous track in playlist
f = seek forward currently playing track
b = seek backward currently playing track
+, - = increase/decrease volume
r = repeat entire playlist
y = repeat single track
z = play random song from playlist
# = toggle display of bitrate
/,? = find forward/find backward
, = find previous
. = find next
w = toggle find mode (normal search/wrapped search)
i/I = show song/artist info
L = toggle lyrics database
F = toggle fetching lyrics in the background
l = toggle display of lyrics
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>

<item>
<title>How to create a custom CWM recovery flash-able android apps zip file in Linux via command line</title>
<link>http://varunbpatil.github.com/2013/03/02/apps-zip</link>
<published>2013-03-02T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/03/02/apps-zip</guid>
<description>&lt;p&gt;&lt;strong&gt;Updated 02-Mar-2013 : Installing as user app instead of system app&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE02MAR2013&quot;&gt;jump to this&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;If you are one of those who constantly keep switching between custom ROM&amp;#39;s and do not feel the need to pay for apps like Titanium Backup to backup all the android apps you currently have installed on your phone, then this is the article for you. I will show you how to easily create a custom android apps zip file that can be flashed in one go via the CWM(ClockWorkMod) recovery. These apps are upgradable after you flash them.&lt;/p&gt;

&lt;p&gt;There is already a free android app available called &amp;quot;App2Zip&amp;quot; which will allow you to do exactly the same thing via a GUI, but if you are thinking, how hard can it be to create a zip file containing your favorite apps, then you are right. It is not hard at all, as I shall now demonstrate.&lt;/p&gt;

&lt;p&gt;First, you will need a skeleton zip file, which contains the META-INF folder. This folder basically contains an updater-script which will mount the system partition and copy your apps into it. Go ahead and &lt;a href=&quot;http://forum.xda-developers.com/attachment.php?attachmentid=1279288&amp;amp;d=1345792638&quot;&gt;download this skeleton zip file from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, copy the zip file to a convenient location and unzip it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir -p ~/custom_apps
$ cp sample.zip ~/custom_apps
$ cd ~/custom_apps
$ unzip sample.zip
$ rm sample.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, you should see two folders &lt;strong&gt;META-INF/&lt;/strong&gt; and &lt;strong&gt;system/&lt;/strong&gt;. The system folder follows exactly the same directory structure as the system/ partition on your android device. The META-INF/ folder as mentioned before, contains the updater-script which mounts the system/ partition of your phone and copies your apps into it. If you use ADB(Android Debug Bridge), you can view the contents of the system/ partition on your android device using the command below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ adb shell ls /system/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are unfamiliar with ADB, you can start by reading through one of my &lt;a href=&quot;http://varunbpatil.github.com/2012/06/18/adb&quot;&gt;previous blog post on adb&lt;/a&gt; and some of the cool stuff you can do with it.&lt;/p&gt;

&lt;p&gt;Of all the directories in the system/ partition, we will concentrate on the &lt;strong&gt;app/&lt;/strong&gt; and the &lt;strong&gt;media/&lt;/strong&gt; directories in this article.&lt;/p&gt;

&lt;p&gt;As you might have guessed, the app folder is where your android apps(your system apps, to be exact) go, and the media/ folder is where you will find ringtones, alarms and notifications.&lt;/p&gt;

&lt;p&gt;So, how do you get the android apps from your android device ?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir ~/my_android_apps
$ adb pull /data/app/ ~/my_android_apps/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the android apps(.apk files) that you had installed on your android device will now be available in the my&lt;em&gt;android&lt;/em&gt;apps/ folder. Basically, all user apps are stored in /data/app/ and all system apps are stored in /system/app on your phone. Some other apps might have been installed at some other location. You might want to enter the following command to find all the .apk files on your device and copy the required ones to the my&lt;em&gt;android&lt;/em&gt;apps/ folder before we begin creating the zip file. Be sure to start ADB as root before you enter the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ adb shell find / -name &amp;quot;*.apk&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use &amp;quot;adb pull&amp;quot; on the path names returned by the find command above to copy the apk files corresponding to the apps you want to backup. Once, the folder my&lt;em&gt;android&lt;/em&gt;apps/ has all the android apps(.apk files) you need, you are ready to start creating your custom flash-able zip file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/custom_apps/
$ mkdir -p system/app
$ mkdir -p system/media/audio/ringtones
$ mkdir -p system/media/audio/notifications
$ mkdir -p system/media/audio/alarms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You now have created a system/ folder that mimics the directory structure of the system/ partition of your android device.
Now, copy all the apps from my&lt;em&gt;android&lt;/em&gt;apps/ folder to the system/app/ folder.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cp ~/my_android_apps/* ~/custom_apps/system/app/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, you can also put any ringtones, notifications and alarms(.ogg files) into the corresponding directories you just created above. You can also put any boot-animation zip file into the custom&lt;em&gt;apps/system/ directory(make sure you rename the boot-animation zip file to whatever name was already present for the boot-animation on your android device). You may also put and new fonts into the custom&lt;/em&gt;apps/system/fonts/ directory after creating one. Now, you are ready to create the zip file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ 7z a my_android_apps.zip ~/custom_apps/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it!!!. You now have a zip file of your favorite android apps and media which can be flashed at the CWM recovery just like you flash gapps or any custom ROM. Note that I have used the 7zip utility to create the zip file. You may have to install it first on your Linux box before you run the above command. On Ubuntu, you can install it as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install p7zip-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, all that remains is to transfer the my&lt;em&gt;android&lt;/em&gt;apps.zip file to the sdcard, and then boot into recovery and install the zip file all of which can be done using ADB as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ adb push my_android_apps.zip /sdcard/
$ adb reboot recovery
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, how hard can that be ? !!!&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE02MAR2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above method installs your apps as system apps(the system/app/ folder). However, if you want your apps to be installed as user apps(just like when you installed them from the play store), you have to put your apk files in another directory &lt;strong&gt;data/app/&lt;/strong&gt; parallel to the system/app/ folder as shown below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/custom_apps
$ mkdir -p data/app
$ cp ~/my_android_apps/* ~/custom_apps/data/app/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This however, is not sufficient. If you take a look at the &amp;quot;updater-script&amp;quot; file inside META-INF/ you will see that only the system partition is mounted. You will have to add a few lines to mount the data partition as well. For my Motorola Defy, I have the following lines in my updater-script.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;run_program(&amp;quot;/sbin/mount&amp;quot;, &amp;quot;/dev/block/mmcblk1p21&amp;quot;, &amp;quot;/system&amp;quot;);
package_extract_dir(&amp;quot;system&amp;quot;, &amp;quot;/system&amp;quot;);
run_program(&amp;quot;/sbin/unmount&amp;quot;, &amp;quot;/dev/block/mmcblk1p21&amp;quot;, &amp;quot;/system&amp;quot;);

run_program(&amp;quot;/sbin/mount&amp;quot;, &amp;quot;/dev/block/mmcblk1p25&amp;quot;, &amp;quot;/data&amp;quot;);
package_extract_dir(&amp;quot;data&amp;quot;, &amp;quot;/data&amp;quot;);
run_program(&amp;quot;/sbin/unmount&amp;quot;, &amp;quot;/dev/block/mmcblk1p25&amp;quot;, &amp;quot;/data&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first 3 lines mount the system partition, extract the contents of the system/ directory in the zip file into this partition and unmounts the system partition. The next three lines do the same for the data partition. However, &lt;strong&gt;note that the device file names(mmcblk1p21 for system partition and mmcblk1p25 for data partition) are specific to my Motorola Defy and may not be the same for your android device.&lt;/strong&gt; That said, finding out the device file names for the system and data partitions on your android device is not difficult at all. You can use adb to find out as shown below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ adb shell mount | grep &amp;#39;/system\|/data&amp;#39; -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also view the contents of &lt;strong&gt;/etc/recovery.fstab&lt;/strong&gt; to find out the device file names. Just replace the device file names you see in the output of the above command(first column of the output) instead of the ones I have used above in the updater-script file.&lt;/p&gt;

&lt;p&gt;That is all... You can now create the zip file using 7zip and flash it in recovery using the same steps as earlier.&lt;/p&gt;
</description>
</item>

<item>
<title>Task Warrior - The best CLI task manager for Linux</title>
<link>http://varunbpatil.github.com/2013/02/19/cli-task</link>
<published>2013-02-19T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2013/02/19/cli-task</guid>
<description>&lt;p&gt;I have used many GUI task managers on Linux before, and gnote was my favorite, because it was simple, easy to use and had all that I needed to keep track of my tasks and nothing more. Now, there is a new favorite on the block. Most importantly, it is controlled via the command line... sweet :)&lt;/p&gt;

&lt;p&gt;The app in question is called &lt;a href=&quot;http://taskwarrior.org/projects/show/taskwarrior&quot;&gt;Task Warrior&lt;/a&gt;. It is super simple to use, has tons of features and is just plain beautiful. You can install task warrior in Ubuntu with the following command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install task
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following are CLI commands for task warrior for some of the most common usage scenarios. It is recommended that you go through all the examples below even though you would not need to use most of them all the time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;List all pending tasks&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task long
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The subcommand long gives you a long listing(all attributes) of pending task. You could have used &lt;strong&gt;&amp;quot;ls&amp;quot;&lt;/strong&gt; or &lt;strong&gt;&amp;quot;list&amp;quot;&lt;/strong&gt; instead of &lt;strong&gt;&amp;quot;long&amp;quot;&lt;/strong&gt; to give a more concise report with fewer columns(attributes). These however do not report tasks that have been completed. If you want to see completed tasks along with pending tasks, use &lt;strong&gt;&amp;quot;all&amp;quot;&lt;/strong&gt;. If you want to list only the completed tasks, use &amp;quot;task completed&amp;quot;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add a new task&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task add &amp;lt;description&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a simple example to add a task. You could specify other attributes for the task while adding it or even later on by modifying an existing task. These attributes will slowly become clear in subsequent examples. You need not quote the description unless the description involves some special characters that may be interpreted by the shell.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mark a task as completed&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task &amp;lt;task_no&amp;gt; done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Completed tasks will no longer show up in the output of &amp;quot;task long&amp;quot;, but can be seen only with &amp;quot;task all&amp;quot;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Delete a task&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task 1,3-5 delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This example serves to show how you can specify multiple task id&amp;#39;s in the same command. Deleted tasks will never show up in the &amp;quot;task ls&amp;quot; reports.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mark a task as started&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task &amp;lt;task_id&amp;gt; start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mark a task as stopped&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task &amp;lt;task_id&amp;gt; stop   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Modify an existing task&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task &amp;lt;task_id&amp;gt; modify &amp;lt;modifications&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can specify a new string to replace the original task description. Or you may add attributes to an existing task. Some of the most important task attributes are listed below.        &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* __add tags__

        $ task linux modify +work

  This command serves as an example to show that, job_id&amp;#39;s are not the only way to identify tasks. Here the word &amp;quot;linux&amp;quot; is used, so all tasks which contain the word linux in their descriptions will be modified. And the modification in this case is to add the tag &amp;quot;work&amp;quot; to each of these tasks. Tags attached to a task can be seen with the &amp;quot;list long&amp;quot; command. To remove a tag assigned to a task, simply use the same modify command as above except that +work should be replaced by -work.

* __specify priority__

        $ task +work modify pri:H

  Here, we select all tasks which have been tagged as &amp;quot;work&amp;quot; and we are assigning a &amp;quot;High&amp;quot;(pri:H) priority to them. Other priority levels available are M(medium priority) and L(low priority). To remove any assigned priorities, simply use the same modify command with an empty priority like so

        $ task +work modify pri:

* __specify due dates__

        $ task +work pri:H modify due:eom

  Here, we select all tasks with a high priority and which have been tagged as &amp;quot;work&amp;quot; and assign a due date to them as eom(end of month). Note the implicit logical AND between pri:H and +work. You could as well have specified the due date as MM/DD/YYYY or Sunday or eoy(stands for end of year).

* __group tasks into project__

        $ task &amp;#39;(pri:H or +linux)&amp;#39; modify project:work

  This example shows how to use a logical OR instead of the implicit logical AND of the previous example. Here, we select all tasks with either a high priority or tagged as &amp;quot;linux&amp;quot; or both and then, put them all under the same project(or group) called &amp;quot;work&amp;quot;.         

* __add annotations for a task__

        $ task &amp;lt;task_id&amp;gt; annotate &amp;lt;description&amp;gt;

  Annotations are like small notes attached to a task. To remove the annotations, use the command below

        $ task &amp;lt;task_id&amp;gt; denotate &amp;lt;pattern&amp;gt;

  Here, we remove those annotations which satisfy the &amp;quot;pattern&amp;quot;.

* __add dependencies for a task__

        $ task 2 modify depends:6

  Here, we are specifying that task 2 depends on task 6. We can list all tasks that are blocked i.e, which depend on other tasks that are not completed.

        $ task blocked

  We can list all tasks that are unblocked i.e, do not depend on any other pending task with

        $ task unblocked

  You can remove a dependency by using the same modify command with depends:-6 instead of depends:6

        $ task 2 modify depends:-6

* __wait till a date until task is displayed__

  Suppose we have a task whose due date is very far out in the future, and we do not want it to be listed in the output of &amp;quot;task list&amp;quot; until a particular date is reached, we can put the task into &amp;quot;waiting&amp;quot; state as follows

        $ task 11 modify wait:10/01/2013

  Here, we are putting task 11 into a waiting state, which means the task will not show up in the output of &amp;quot;task list&amp;quot; until 1st Oct 2013.

  You can see all tasks that are waiting

        $ task waiting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Relational operators in filters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can use relational operators like = != &amp;lt; &amp;gt; &amp;lt;= &amp;gt;= while specifying task filters. As an example, consider&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task &amp;#39;(pri!=H and due&amp;gt;eom)&amp;#39; long
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command lists all tasks that do not have a high priority and have a due date after the end of the current month.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Syncing tasks between multiple computers running task warrior&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;If you have a work and a home computer both running task warrior, you can sync tasks between them and the way I do it is via Dropbox(to store the task data). You could also use ssh to sync task data between local and remote computers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task push ~/Dropbox/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command pushes the local task data into Dropbox. Now, on the other computer, you can get these tasks by doing&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task pull ~/Dropbox/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pull command however destroys all tasks that are local. If you want to retain your local tasks as well as get new tasks from the other computer, you should use&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task merge ~/Dropbox/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, you get to keep your local tasks as well as get any updated tasks from the other computer. You also have the option of pushing the merged task data to Dropbox as part of the same command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have only described commands for common use cases, which is more than enough to keep you neatly organized. However there are several other features available in task warrior that may be useful in some scenarios. The best way to get concise help on these features, and refresh your memory should you forget some of the above commands is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ task help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>

<item>
<title>Custom kernel in Ubuntu (also generate .deb package)</title>
<link>http://varunbpatil.github.com/2012/12/27/kernel</link>
<published>2012-12-27T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2012/12/27/kernel</guid>
<description>&lt;p&gt;&lt;strong&gt;Updated 20-Jun-2013 : Building kernel deb package&lt;/strong&gt; [ &lt;a href=&quot;#UPDATE20JUN2013&quot;&gt;jump to this&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;This is a final how-to of this great year 2012, where I will show you how to compile a linux kernel and boot it on your linux box(it doesn&amp;#39;t matter which distro you use).&lt;/p&gt;

&lt;p&gt;To build the linux kernel, you will need the kernel source first. The best place to get the latest stable and unstable linux kernels is &lt;a href=&quot;http://www.kernel.org&quot;&gt;www.kernel.org&lt;/a&gt;. The latest stable kernel release at the time of this writing is 3.7.1. Go ahead and download the tarball for the latest kernel release(preferrably a stable release). Downloading the kernel source on a decent broadband connection is going to take a while, so sit back and relax. I personally prefer to clone the git repository for the kernel source, so everytime there is a kernel update, I don&amp;#39;t need to download the entire kernel source. There is however no need to download the entire kernel source after an update, even while using a tarball. You can as well get a patch and apply it. Just to keep things simple, let us suppose you downloaded the tarball and extracted it somewhere, say to &lt;strong&gt;~/linux-stable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you are ready to start building your new kernel. However, to build a linux kernel, you need to configure the kernel. Basically what this means is that, you need to tell the build system, what the kernel must include within itself and what must be built as modules and what is not neededin the kernel build. For example, you must specify what drivers you need for the hardware on your computer, etc. There are more than a thousand configuration options for the kernel, and it can be a daunting task to specify every single one of them on your own. The solution is to use the configurtion of your current kernel(i.e, the configuration of the kernel that is provided as part of the linux distro you are using). This configuration file should be named &lt;strong&gt;.config&lt;/strong&gt; and must be present in the top src directory of the kernel.&lt;/p&gt;

&lt;p&gt;So go ahead and copy the present kernel&amp;#39;s config as shown below. The current kernel&amp;#39;s config can be found in /boot with a name starting with config- followed by the kernel version.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cp /boot/config-* ~/linux-stable/.config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The new kernel may include options not found in your current kernel and thus there may be a few configuration options that you need to still specify.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/linux-stable
$ make oldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted with quite a few questions that will further configure your new kernel. If you are not sure what to answer to those questions, you can select the default by simply pressing the Enter key for each of the questions. Once the kernel configuration is complete you are ready to actually start compiling the linux kernel.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ make -j`cat /proc/cpuinfo | grep -c processor`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sit back and relax as the build is going to take a lot of time, especially when you use the configuration of your current kernel, because your current kernel configuration builds drivers for almost every hardware imaginable(even though you wouldn&amp;#39;t need them), because your distro is aimed at a large audience. Using the current kernel&amp;#39;s configuration is the safest way to build the kernel and get it to boot, however, you may try to modify the kernel configuration in ~/linux-stable/.config to suit your needs. The above command builds the kernel image as well as the kernel modules that get loaded dynamically. Now, all that is left is to install the new kernel image and kernel modules and to get the bootloader(ex: GRUB) to recognize and boot the new kernel the next time you boot your computer.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo make modules_install install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command installs the kernel image in the /boot directory, generates any initrd(initial ram disk) that is needed by the kernel during boot, generates a map file by the name of System.map(similar to a symbol table for the kernel) and also copies the configuration for the new kernel into the /boot directory(so that you may reuse it later to build another kernel, just as we did). It also modifies the bootloader configuration for you automatically, so that the bootloader(ex: GRUB) recognizes the new kernel. The kernel modules are installed into /lib/modules with the kernel version as the name and are linked to the kernel image. The kernel headers are installed into /usr/src.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it. You have now succesfully compiled and installed a new kernel, albeit without any modifications of your own to the kernel. You can boot into the new kernel by holding down the shift key after the BIOS message during reboot to show the bootmenu of the bootloader where you can select the desired kernel version to boot into(the latest kernel version is selected for boot automatically). After boot, you can verify that you are indeed running the kernel that you just built by running &lt;strong&gt;&amp;quot;$ uname -r&amp;quot;&lt;/strong&gt; in a terminal which will show you the kernel version you are currently using.&lt;/p&gt;

&lt;p&gt;If you find that you are unable to boot into the new kernel, don&amp;#39;t weep(you might have got some configuration option wrong), there is always backup. You can always boot into the kernel that your distro supplied by selecting it in the bootmenu of the bootloader during boot.&lt;/p&gt;

&lt;p&gt;Should you decide that you no longer need a particular kernel version, you can completely get rid of it by deleting the corresponding kernel&amp;#39;s config, vmlinuz, System.map and initrd from the /boot folder and the corresponding kernel modules from /lib/modules and the kernel header from /usr/src. Once you are done deleting these files, all that remains is to update the bootloader by running &lt;strong&gt;&amp;quot;$ sudo update-grub2&amp;quot;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Should you decide to rebuild the new kernel from scratch run &lt;strong&gt;&amp;quot;$ make mrproper&amp;quot;&lt;/strong&gt;  in ~/linux-stable to clean the kernel configuration and all the files that have already been built and you are ready to start all over again.&lt;/p&gt;

&lt;p&gt;Happy hacking :) and happy new year :)&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;UPDATE20JUN2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE : 20-Jun-2013&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;Building your custom kernel as a .deb package&lt;/h4&gt;

&lt;p&gt;If you find that compiling the kernel is taking too long on your computer, and have another faster, more powerful computer at your disposal, you can build your custom kernel as a .deb package on the faster computer, copy the .deb packages to the other computer and install your custom kernel there. You can even use the same .deb packages to install the custom kernel on other machines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the faster machine :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/linux-stable
$ make-kpkg clean
$ export CONCURRENCY_LEVEL=24 #change according to no. of CPU cores
$ fakeroot make-kpkg --initrd --append-to-version=-custom \
  kernel_image kernel_headers modules_image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above export and make-kpkg commands can be combined into a single command like below&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ fakeroot make-kpkg -j24 --initrd --append-to-version=-custom \
  kernel_image kernel_headers modules_image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After --append-to-version= you can write any string that helps you identify the kernel, but it must begin with a minus (-) and must not contain whitespace.&lt;/p&gt;

&lt;p&gt;After building is complete, you will find two .deb packages in the parent dir of the kernel source tree. Copy them to your other computer where you want to install the custom kernel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the slower machine (where you want to install custom kernel) :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo dpkg -i linux-image-*
$ sudo dpkg -i linux-headers-*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This step will also make an initrd image as well as modify the grub config for you automatically just as before. All you have to do now is reboot and enjoy your new kernel.&lt;/p&gt;
</description>
</item>

<item>
<title>Linux command line tools and tricks - Part 2</title>
<link>http://varunbpatil.github.com/2012/10/01/linux-tricks-2</link>
<published>2012-10-01T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2012/10/01/linux-tricks-2</guid>
<description>&lt;p&gt;Hope you enjoyed the first part of my Linux tools and tricks. Here, I give you few more interesting commands and tools for daily use and for fun.&lt;/p&gt;

&lt;h4&gt;Securely delete files so that they can&amp;#39;t be recovered&lt;/h4&gt;

&lt;p&gt;We have all seen movies where federal departments are able to recover data from hard drives of cons. If only they knew how to use linux. Linux allows you to completely destroy previous data by overwriting it with all zeroes/nulls, making it impossible to recover, no matter how much government funding the person trying to recover your data receives. And the process couldn&amp;#39;t have been more simpler.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/zero of=&amp;lt;file_to_delete&amp;gt;;sync;rm -f &amp;lt;file_to_delete&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you remember, we had used the &amp;quot;dd&amp;quot; command to create a bootable usb in part 1 of my Linux hacks. There is a special file in linux by the name /dev/zero which contains nothing but zeroes. However, this is not a physical file on disk, and is generated on the fly. So, the file size you are trying to delete securely doesn&amp;#39;t matter. The &amp;quot;sync&amp;quot; command just flushes the output buffers. Up to this step you have only overwritten the file on the disk. You can view it with your favorite editor, but all you will see is junk data. Now it is safe to remove the file using the normal &amp;quot;rm&amp;quot; command.&lt;/p&gt;

&lt;h4&gt;Recording a super-high quality screen-cast from the command line&lt;/h4&gt;

&lt;p&gt;Let us get straight down to business with the command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ffmpeg -f x11grab -r 30 -s 1366x768 -i :0.0 \
  -vcodec libx264 -vpre lossless_ultrafast \
  -crf 0 -threads 0 /tmp/output.mkv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks complicated, but really very easy to break it down. &lt;/p&gt;

&lt;p&gt;-f x11grab tells ffmpeg that the input will be from the x11 windowing system. x11 is simply a standard for GUI.&lt;/p&gt;

&lt;p&gt;-r 30 tells the frame rate which in this case will be 30 fps.&lt;/p&gt;

&lt;p&gt;-s 1366X768 tells the size of the screen to record. Please be sure to specify a resolution suitable for your computer, otherwise you will get an error.&lt;/p&gt;

&lt;p&gt;-i :0.0 tells ffmpeg to record from your display. This is required because there can be multiple monitors attached. This is nothing but the value of a shell variable by the name $DISPLAY. You can say &amp;quot;$ echo $DISPLAY&amp;quot; to confirm it on your machine.&lt;/p&gt;

&lt;p&gt;-vcodec specifies the video codecs to use.&lt;/p&gt;

&lt;p&gt;-vpre specifies some video presets... to make the video recording lossless.&lt;/p&gt;

&lt;p&gt;The other options can be ignored. The last argument is the file name where the screen-cast will be stored.&lt;/p&gt;

&lt;h4&gt;Using pushd and popd to navigate directories&lt;/h4&gt;

&lt;p&gt;we are all familiar with the cd command to navigate directories. But power users use something else in addition. They are pushd and popd. The commands and what they do are super simple.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pushd &amp;lt;dir_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command will push the present working directory onto a stack and then automatically cd to &amp;#39;&amp;lt;&amp;#39;dir_name&amp;#39;&amp;gt;&amp;#39;.        &lt;/p&gt;

&lt;p&gt;When you are done with the new directory, if you want to get back to the old one, without having to type in the name, you just do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it. You are in your previous working directory. This method can be used to navigate between commonly used directories.        &lt;/p&gt;

&lt;p&gt;You can view the current directory stack at any time using the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dirs -l -p -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command displays the number of the directory on the stack as well. You will notice that, always, the current directory will be on the stack regardless of whether you use pushd or popd. You can use these numbers to cd to a specific directory on the stack like so&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ popd +2   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will cd to the second directory on the stack(from the top of the stack).        &lt;/p&gt;

&lt;p&gt;You can clear the entire contents of the directory stack with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dirs -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Share any directory with any user via a web browser&lt;/h4&gt;

&lt;p&gt;First, cd to the directory that you want to share with others and then enter this simple command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, ask the other person to open a web browser and enter the URL as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;IP_addr_of_your_machine&amp;gt;:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can easily find out the IP addr of your machine using the &amp;quot;$ ifconfig&amp;quot; command.&lt;/p&gt;

&lt;p&gt;Now the other user should be able to see the contents of your directory and all subdirectories recursively, in a simple text interface.&lt;/p&gt;

&lt;h4&gt;Translate an English sentence to speech in other language and play it on your speakers&lt;/h4&gt;

&lt;p&gt;This is a simple hack which uses Google Translate and google tts(text to speech) to convert any English sentence into another language and play the speech on your computer&amp;#39;s speakers. The disadvantage at this moment is that Google Translate does not have support for text to speech conversion for many languages. However, for those languages that do have tts support, you can have fun trying them. For example, the following command speaks out the phrase &amp;quot;I will sleep&amp;quot; in Russian !!!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget -q -O - -U Mozilla \
  &amp;#39;http://translate.google.com/translate_tts?tl=ru&amp;amp;q=I will sleep&amp;#39; \
  | mpg123 -q -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have seen in Part 1 of Linux tools and tricks that wget is used to download files off the internet. It does the same thing here are well. Only this time, the output wont be written to a file, but to standard output. This is specified using the -O - option. Of course, you would not want some mp3 non-ascii symbols to ruin your terminal. That is why we use the -q option to quiet the wget command. -U specifies the user-agent that the web server will see, or in simple words, the name of the web browser. We are cheating the web server into believing that the request is coming from a Mozilla browser. The parameters following the ? are GET request parameters. One of them is tl which specifies the language you want the sentence translated into. The second GET request parameter is q which specifies the sentence to translate. The order of the parameters may be interchanged without any problem, and you can specify any English sentence and any language(provided that language has tts support) The second GET request parameter is q which specifies the sentence to translate. The order of the parameters may be interchanged without any problem, and you can specify any English sentence and any language(provided that language has tts support). Now, all we are doing is piping the output to another program by the name mpg123 that can play the mp3 stream that it receives from the standard output of wget. You will have to install the mpg123 program on your computer for this hack to work. Happy translating :)&lt;/p&gt;

&lt;h4&gt;Taking a screen-shot when print-screen does not work&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ chvt 7; sleep 10; import -display :0.0 -window root image.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us break down the command.&lt;/p&gt;

&lt;p&gt;chvt 7 means change to virtual terminal 7. If you have noticed while using linux that there are many virtual terminals that you can access by pressing CTRL-ALT-F1 to CTRL-ALT-F7. CTRL-ALT-F7 is usually the virtual terminal that is running the x11 windowing system. That is where you would want to take your screen-shot.&lt;/p&gt;

&lt;p&gt;sleep 10 means do nothing(sleep) for 10 seconds. This gives you 10 seconds the position the window of which you want the screen-shot to be taken in the foreground. You can adjust this to your liking, just do not make it too low.&lt;/p&gt;

&lt;p&gt;The next command simply imports the contents from your display into a file named image.png in the directory from which you executed the command.&lt;/p&gt;

&lt;p&gt;As in the screen-casts command that you saw previously :0.0 refers to your display. You can see this by typing &amp;quot;$ echo $DISPLAY&amp;quot;.&lt;/p&gt;

&lt;p&gt;Simple, and guaranteed way to take a screen-shot no matter which linux box you are using.&lt;/p&gt;

&lt;h4&gt;Executing a command continuosly&lt;/h4&gt;

&lt;p&gt;Have you encountered a situation where you are copying gigabytes of data and you don&amp;#39;t know how much has been copied to the destination yet? The following command will help you out.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo watch du -sh /path/to/destination_dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command will show how many megabytes(M) or gigabytes(G) of data are being copied to the destination and the information is updated every two seconds. You can ofcourse change the interval at which the command is repeated by using the -n switch as follows&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo watch -n 10 du -sh /path/to/destination_dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command is the same as the previous one except that the du command is executed at 10sec intervals rather than the default 2sec intervals.&lt;/p&gt;

&lt;p&gt;In fact you can pass as argument to watch any command that you want to execute repeatedly. Here, the du command was only used as an example. &lt;/p&gt;

&lt;p&gt;You can exit the command by pressing Ctrl+C.&lt;/p&gt;

&lt;h4&gt;Gstreamer fun - Capture webcam video from command line and save to file&lt;/h4&gt;

&lt;p&gt;Gstreamer is a media framework which means it allows you to form codecs (which are called plugins in gstreamer parlance) into a pipeline which allows you to do really interesting things with your media. The following is one very simple example.&lt;/p&gt;

&lt;p&gt;The following Gstreamer pipeline allows you to run the webcam on your laptop using just the command line...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gst-launch v4l2src device=/dev/video0 ! \
  &amp;quot;video/x-raw-yuv, width=640, height=480, framerate=30/1&amp;quot; ! \
  xvimagesink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gst-launch is the command to create a gstreamer pipeline. A gstreamer pipeline is nothing but a collection of the appropriate codecs in the proper order. Each component (or plugin) of the pipeline is seperated by a bang(!). The first plugin, v4l2src identifies the source of the input, which in our case is the webcam. In Linux, everything is a file and the file that represents the webcam is /dev/video0... how convenient... Linux rocks !!! The next component within the quotes are called the filter caps... Do not bother much about what it does, but it is used to negotiate some parameters between adjacent plugins. The final component is a sink, which in this case refers to the screen where the video captured from the webcam is displayed. &lt;/p&gt;

&lt;p&gt;If you want to record the webcam video to a file, then all you need is a minor modification to the above command...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gst-launch v4l2src device=/dev/video0 ! \
  &amp;quot;video/x-raw-yuv, widht=640, height=480, framerate=30/1&amp;quot; ! \
  x264enc ! mpegtsmux ! filesink location=webcam.h264
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Gstreamer pipeline in this case is essentially the same as the previous, the only difference being that the sink in this case is a file rather than the screen, as a result of which the video captured from the webcam is saved to the specified file.          &lt;/p&gt;

&lt;p&gt;Now, you can play the recorded webcam video from the command line as follows&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ vlc webcam.h264
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;More Gstreamer fun - Extract mp3 from mp4 video in command line&lt;/h4&gt;

&lt;p&gt;We can do some really cool things with a Gstreamer pipeline. Here is just one more example. Have you every searched the farthest reaches of the internet to convert a mp4 music video that you downloaded off youtube to a mp3 so you could play it on your mp3 player.  The task couldn&amp;#39;t have been more easier.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gst-launch filesrc location=&amp;lt;mp4 file&amp;gt; ! decodebin2 ! \
  audioconvert ! lame quality=0 ! filesink location=&amp;lt;mp3 file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us understand this simple Gstreamer pipeline. The first plugin gives us the source(or input) which is a mp4 file on your computer. The second component &amp;quot;decodebin2&amp;quot; is a sort of universal decoder in Gstreamer. It does all the hard work like identifying the type of input stream(in this case mpeg4), calling the appropriate decoder to decode this stream, etc on your behalf so you don&amp;#39;t have to worry about all the minute details. The third plugin &amp;quot;audioconvert&amp;quot; is responsible for converting the decoded stream into raw audio. But this raw audio is just bits and bytes which cannot be played by your favorite mp3 player, because your player cannot identify this raw data as mp3. So, there needs to be some metadata (like headers) to identify this file as mp3 and this is the work of the &amp;quot;lame&amp;quot; plugin, which is a mp3 encoder(it encodes the raw audio into an mp3 stream). The &amp;quot;quality=0&amp;quot; is nothing but one of the parameters of the lame encoder which tells it to use the best quality algorithm to encode the mp3 file(higher quality means slower encoding). And finally the stream is written to a sink, which in this case is a file on your computer.&lt;/p&gt;

&lt;h4&gt;Safe reboot (Linux SysRq magic)&lt;/h4&gt;

&lt;p&gt;Whenever you find yourself holding down the power button to force shutdown your linux box, you are at risk of losing important data and corrupt existing data on disk because the disks have not been synced yet, which will happen only when you end a process(like say a text editor) correctly.There is however a neat method that linux provides to safely reboot your linux box, when you cannot work with the GUI or cannot open a console.&lt;/p&gt;

&lt;p&gt;To use it, you will need to enable SysRq(System Request) on your linux machine, which is disabled by default. You can enable it by&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo echo &amp;quot;kernel.sysrq = 1&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, reboot your system to make sysrq available.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t already noticed, every modern keyboard has a dedicated sysrq key which is mostly the same as the Print Screen key. Ha!!! noticed it now. Good for you. To send Sysrq messages to the kernel, you will have to use the key combination &amp;quot;Alt+PrintScr&amp;quot;&lt;/p&gt;

&lt;p&gt;So, the next time you are left looking for the power button to hard-reboot your system, spare your computer hard-disks some trouble and use the key sequence --- &amp;quot;Alt+PrintScr+sub&amp;quot; (i.e, press &amp;#39;s&amp;#39; followed by &amp;#39;u&amp;#39; followed by &amp;#39;b&amp;#39; while keeping the Alt and PrintScr keys depressed the whole time). Each of these keys sends a special signal as interrupts to the kernel which you can be sure the kernel will service even though nothing on the outside seems to be working for you(although the only thing that isn&amp;#39;t working mostly is the Xwindows system).&lt;/p&gt;

&lt;p&gt;To put is plainly, pressing &amp;quot;Alt+PrintScr+s&amp;quot;, forces data in buffers to be synced to the disks, so you don&amp;#39;t lose data that you haven&amp;#39;t saved yet. &amp;quot;Alt+PrintScr+u&amp;quot; unmounts any filesystems that have been mounted. &amp;quot;Alt+PrintScr+b&amp;quot; tells the kernel to reboot the system. There you go, a safe reboot :)&lt;/p&gt;

&lt;h4&gt;Faster keyboard cursor movement in Linux&lt;/h4&gt;

&lt;p&gt;Have you found yourself wishing that the keyboard cursor moved a bit faster while working on the terminal or in an editor like vim or emacs. The solution is a one-liner as below&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ xset r rate 200 60
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is this command doing? It is basically decreasing the keypress interval delay to 200(from the default 250 or something) and increasing the rate of keypress to 60(from the default 30). Be sure to add the command to your bashrc. Feel free to change the numerics according to your needs, I found the above settings quite comfortable. For faster cursor movement, decrease the first value and increase the second value in the command.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay tuned for more additions to this page.&lt;/strong&gt;&lt;/p&gt;
</description>
</item>

<item>
<title>Superb Linux command line tools and tricks for Linux geeks</title>
<link>http://varunbpatil.github.com/2012/09/19/linux-tricks</link>
<published>2012-09-19T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2012/09/19/linux-tricks</guid>
<description>&lt;p&gt;I have gathered some of the best and most widely used linux command line tools and tricks from all over the web and from my recent Linux System Programming training from Cisco conducted by one of the best teachers I have ever had in quite some time, &lt;a href=&quot;http://chandrashekar.info/&quot;&gt;Mr. Chandrashekar Babu&lt;/a&gt;. I use all or most of these commands at work and home frequently. Hope you find it useful and most importantly mind-boggling, fun and interesting, something that will keep you occupied over a long and boring weekend:)&lt;/p&gt;

&lt;h4&gt;A faster alternative to the &amp;quot;find&amp;quot; command&lt;/h4&gt;

&lt;p&gt;There is a command by the name &amp;quot;locate&amp;quot; in Linux that is much faster the super-useful &amp;quot;find&amp;quot; command, the reason being that &amp;quot;locate&amp;quot; command indexes files before-hand. The disadvantage is that files keep on getting added or removed making &amp;quot;locate&amp;quot; unreliable if the indexing is not done regularly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First index the files on your computer&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo updatedb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, search for a file&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ locate -ie &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Downloading files using &amp;quot;wget&amp;quot;&lt;/h4&gt;

&lt;p&gt;&amp;quot;wget&amp;quot; is an extremely powerful command line tool to download files off the internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download file from a single url with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download only a certain type of files from an URL(say mp3&amp;#39;s)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget -r -A.mp3 &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can as well store multiple url&amp;#39;s to download from in a file(one URL in each line) and give the filename as input to wget&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget -i &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best feature is that you can resume interrupted downloads by simply using the switch -c with any wget command above        &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget -c &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also mirror an entire website for offline viewing using the following command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget -rpk &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;An alternative to &amp;quot;wget&amp;quot; -- &amp;quot;curl&amp;quot;&lt;/h4&gt;

&lt;p&gt;&amp;quot;curl&amp;quot; is another powerful tool that works very much similar to &amp;quot;wget&amp;quot;. This package doesn&amp;#39;t come by default. You will have to install it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download file from a single url with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download from multiple URL&amp;#39;s with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl -O &amp;lt;URL1&amp;gt; -O &amp;lt;URL2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resume an interrupted download&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl -C &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And lastly, find the definition of a word with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl dict://dict.org/d:&amp;lt;word_to_search_for&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Observing the differences between two files in a very colorful way&lt;/h4&gt;

&lt;p&gt;We all know the basic diff command to observe the difference between two files, and we also know how hard it is to interpret the result of running the command. This is where vimdiff comes in. It displays the two files side by side in two vim tabs. The obvious disadvantage is that you should know a few commands to navigate around vim. Most importantly, the output is colored, with different colors meaning different things as below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Same lines in both files do not have a background color.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a line is missing in one file, it is shown as - - - with a blue background.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Partial line matches are shown in red background.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Splitting, compressing and encrypting files before transfering to others&lt;/h4&gt;

&lt;p&gt;We all at some point have had to deal with transferring large files across computers. The obvious method is to compress it before sending. For extremely large files we can create a multi-part archive using the following commands.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all, create a zip archive using&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ zip -re &amp;lt;compressed_file_name.zip&amp;gt; &amp;lt;file1&amp;gt; &amp;lt;dir1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The -r switch allows you to add directories to the archive.&lt;/p&gt;

&lt;p&gt;The -e switch allows encryption, where the program asks you to enter a passphrase that needs to be entered by the recepient in order to extract the archive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now split the archive into multiple parts with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ split --bytes=1K &amp;lt;compressed_file_name.zip&amp;gt; &amp;lt;PREFIX&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, - -bytes=1K specifies that we want parts that are at most 1K bytes in size.&lt;/p&gt;

&lt;p&gt;PREFIX is any user string... For example, if the PREFIX is given as &amp;quot;split&lt;em&gt;&amp;quot;, then the files that are created will be named split&lt;/em&gt;aa, split&lt;em&gt;ab, split&lt;/em&gt;ac, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the receiving side, you can extract the multipart zip archive with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cat split_* &amp;gt; my_compressed_file.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where, &amp;quot;split_&amp;quot; was the PREFIX that the person who created the archive specified.&lt;/p&gt;

&lt;p&gt;Then, extract the whole zip file as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ unzip my_compressed_file.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Encrypting a single file using &amp;quot;openssl&amp;quot; for secure local storage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Encrypt a particular input file with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ openssl enc -aes-256-cbc -e -in &amp;lt;plain_text_file_name&amp;gt; \
  -out &amp;lt;encrypted_file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will be prompted to enter your password.&lt;/p&gt;

&lt;p&gt;Please also do remember to use the same encryption algorithm which in this case is aes-256-cbc( very secure ), when you want to decrypt the file, although there are several other encryption algorithms that openssl provides. i.e, you have to use the same crypto algorithm for both encryption and decryption of a particular file.&lt;/p&gt;

&lt;p&gt;The -e switch stands for encryption.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To decrypt a file which was encrypted using openssl use&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ openssl enc -aes-256-cbc -d -in &amp;lt;encrypted_file_name&amp;gt; \
  -out &amp;lt;plain_text_file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The -d switch stands for decryption.        &lt;/p&gt;

&lt;h4&gt;Performing spell check on a file from command line using &amp;quot;ispell&amp;quot;&lt;/h4&gt;

&lt;p&gt;The program used to perform a very basic spell check from the command line is called &amp;quot;ispell&amp;quot;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Run spell check on a given file with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ispell &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, you have several actions that you can take on misspelled words in the file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Type the number &amp;#39;n&amp;#39; to replace the misspelled word with the word against that number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type &amp;#39;R&amp;#39; to replace the misspelled word with a word that you wish to type in (i.e, which is not there in the numbered list).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Press spacebar to ignore that misspelled word just once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Press &amp;#39;A&amp;#39; to ignore that misspelled word in this entire ispell session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;press &amp;#39;Q&amp;#39; to quit the program.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Finding out the public IP of a website&lt;/h4&gt;

&lt;p&gt;This is useful in cases where your DNS server is unable to resolve the website name into its public IP. This could happen because your ISP which also provides you with the DNS service has blocked that website. I used this technique recently when all Indian ISP&amp;#39;s where asked to block peer-to-peer sharing sites by the Indian Government. Most of these ISP&amp;#39;s simply configure their DNS server&amp;#39;s so as to not resolve the website names of such websites into public IP&amp;#39;s and thus make them inaccesible, but you can always access such sites using their IP addresses. You could have obtained the IP address of such a site before hand using the following command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ host &amp;lt;site_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, you could even possibly change the DNS server settings manually by setting it to the address of DNS servers provided by google which is 8.8.8.8. Since Google does not block these file sharing websites, you will be able to get the domain resolved successfully, unless your ISP is really intelligent and is blocking all traffic to such sites.        &lt;/p&gt;

&lt;h4&gt;How to put a CPU to 100% usage&lt;/h4&gt;

&lt;p&gt;This is one of my favorite command line tricks. It allows you to put the CPU to 100% usage. This way you can see how long your laptop battery lasts in the worst case, under heavy load.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cat /dev/urandom &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is something very interesting going on here. /dev/urandom is a file which continuously generated random data. And keep in mind this is not just pseudo random data, it is pure random data, because the way /dev/urandom gets these input is from interrupts in the system like mouse movements, key presses on the keyboard, signals sent to the display, packets arriving over the network and a whole lot of other places which are truly unpredictable by any means.&lt;/p&gt;

&lt;p&gt;This capability gives rise to an other super-cool feature. You can use this file to generate random passwords that are severely hard to crack as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ egrep -ioam1 &amp;#39;[a-zA-Z0-9!@#$%^&amp;amp;*()_+-=]{8}&amp;#39; /dev/urandom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command generates a random password of 8 characters length. Ofcourse, you can change the number 8 in the regular expression to a larger value to generate longer passwords.        &lt;/p&gt;

&lt;p&gt;One thing you will notice that in dual core and quad core CPU&amp;#39;s, only one of the cores is put to 100% usage and the load is automatically balanced between the available cores. So, if you want to put all the cores of your CPU to 100% usage, make sure you run the first command as many times as the number of cores, by launching multiple terminals simultaneously.&lt;/p&gt;

&lt;p&gt;You can verify the 100% usage of the CPU by using the &amp;quot;$ top&amp;quot; command which will display all the processes that are running and the amount of resources that they are using. You should see cat command at the top almost all the time and also see 100% cpu usage when you run the command.&lt;/p&gt;

&lt;p&gt;But, you should also notice that, even when you put all cores to 100% usage by running the command multiple times simultaneously, you will experience very little or no lag in mouse movement or keypress delay... This is the beauty of Linux, because Linux gives super-high priority to such hardware interrupts. If you were to do something similar on a windows systems, you had better be ready to face robotic mouse and window movements.&lt;/p&gt;

&lt;h4&gt;Another way to put your CPU to 100% usage&lt;/h4&gt;

&lt;p&gt;Here is another way to use Linux&amp;#39;s super high precision calculator tool &amp;quot;bc&amp;quot; to put your CPU to 100% usage. All you need to do is run the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;quot;scale=10000;4*a(1)&amp;quot; | bc -l -q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this command is doing is computing the value of PI to 10000 decimal places and dumping it to the standard output. If you don&amp;#39;t want your standard output clobbered with numbers you won&amp;#39;t be using anytime in your life, you can redirect the standard output as follows&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;quot;scale=10000;4*a(1)&amp;quot; | bc -l -q &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command gives rise to another very interesting command. You can compare the speeds of your computer and a friends computer and then boast that yours is faster or get a new computer after being humiliated, by running the same command as above, only this time, with the prefix time.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ time echo &amp;quot;scale=10000;4*a(1)&amp;quot; | bc -l -q &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can compare how many seconds (CPU time) the two computers took to calculate the value of PI to 10000 decimal places, which I can promise you is a heck of a lot of time even on my quad core second generation i5 laptop.        &lt;/p&gt;

&lt;h4&gt;Writing an ISO image file to a CDROM from the command line&lt;/h4&gt;

&lt;p&gt;We usually download .iso images of popular linux distros for installation or as live media, but end up using a GUI cd burning tool to create a bootable cdrom. But, if your feeling a bit geeky, you could try doing so from the command line with &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cdrecord -v speed=0 driveopts=burnfree -eject dev=1,0,0 &amp;lt;src_iso_file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;speed=0 tells the program to write the disk at the lowest possible drive speed, which is good considering the shitty quality of cdroms that we get in India. But, if you are in a hurry, you can try speed=1 or speed=2. Keep in mind that these are relative speeds.        &lt;/p&gt;

&lt;p&gt;-eject switch tells the program to eject the cdrom after the operation is complete.&lt;/p&gt;

&lt;p&gt;Now, the most important part... specifying the device id. It is absolutely important that you specify the device id of your cd rom drive correctly or you may end up writing the iso to some other place on disk and corrupting your entire hard disk. To find out the device id of your cd-rom drive, just run this command prior to running the first command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cdrecord -scanbus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your cd-roms device id should look something like 1,0,0 but need not be exactly the same on your system.        &lt;/p&gt;

&lt;p&gt;Also, note that, you cannot create a bootable dvd disk using this command for distros like openSUSE or Fedora or Ubuntu or Slackware which come as dvd iso&amp;#39;s. But, do not be disheartened, there is another more simpler command to burn a bootable dvd&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ growisofs -dvd-compat -speed=0 -Z /dev/dvd=myfile.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, /dev/dvd is the device file that represents your dvd rom. It is quite likely to be the same on your system as well.&lt;/p&gt;

&lt;p&gt;Donot use growisofs to burn a cdrom. The beauty of linux is that a single command does a single operation and does it well. So, we will stick to it.&lt;/p&gt;

&lt;h4&gt;Creating a bootable USB disk&lt;/h4&gt;

&lt;p&gt;Now, that you know how to create a bootable cdrom, you have to admit, it is a bit of a pain to buy and burn a cdrom every time you want to try a new linux distro and then wait forever until the OS is installed from the super-slow cd rom. The solution is to create a bootable usb disk and the procedure to create one, assuming you already have a partitioned and formatted pendrive, couldn&amp;#39;t have been more easier. All you have to do is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=mylinux.iso of=/dev/sdb bs=20M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here if stands for input file, of for output file and bs for block-size.        &lt;/p&gt;

&lt;p&gt;After this, make sure you flush the write buffers to disk by issuing the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here /dev/sdb is the device file that represents your usb pendrive. It may be different on your system. But it is always something like sdb or sdc. To find out exactly, plug in your usb disk and then run &amp;#39;$ sudo fdisk -l&amp;#39;. You should be able to see a partition table for your pendrive at the bottom and also atleast one partition which would be something like sdb1 or sdc1. However, if you haven&amp;#39;t formatted your pendrive before and want to learn how to do it from the command line, then read the next section.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t already realized, you can do amazing things with the dd command. You can create a backup of an entire hard disk partition by&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/sda1 of=/dev/sda2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command copied the entire partition sda1 on your hard disk to partition sda2. You can restore the partition simply by interchanging the if and of attributes. However, exercise extreme caution while using the dd command as you can completely mess up your hard drive and lose all data if you specify the if and of attributes wrongly.        &lt;/p&gt;

&lt;h4&gt;Partitioning and formatting a USB key&lt;/h4&gt;

&lt;p&gt;I have to admit partitioning and formatting a USB key from the command line is not as easy as right clicking and selecting format. But, I also have to tell you that the command line tool called &amp;quot;fdisk&amp;quot; provides unprecedented control over the process, and shouldn&amp;#39;t be very difficult to get a hang of. First of all, plug in your pendrive and run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo fdisk -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note down the device file for your pendrive. It should be something like /dev/sdb or /dev/sdc. Assuming yours is /dev/sdb, run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo fdisk /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You are now into the fdisk program. You can press &amp;#39;m&amp;#39; to see a list of all possible commands allowed.        &lt;/p&gt;

&lt;p&gt;Supposing you already have a partition on your pendrive you can delete them by pressing &amp;#39;d&amp;#39; and then entering the number of the partition.&lt;/p&gt;

&lt;p&gt;If you do not have a partition, you have to create one. To create a new partition, simply press &amp;#39;n&amp;#39;. You will be asked whether you want to create a primary or extended partition. Press &amp;#39;p&amp;#39; to create a primary partition. You now have to tell, what type of file system you would like to have on the new partition. To do that, press &amp;#39;t&amp;#39; and then select &amp;#39;c&amp;#39; for a FAT file system. You will be asked whether you want to create a primary or extended partition. Press &amp;#39;p&amp;#39; to create a primary partition.&lt;/p&gt;

&lt;p&gt;You now have to tell, what type of file system you would like to have on the new partition. To do that, press &amp;#39;t&amp;#39; and then select &amp;#39;c&amp;#39; for a FAT file system. You will be asked whether you want to create a primary or extended partition. Press &amp;#39;p&amp;#39; to create a primary partition. You now have to tell, what type of file system you would like to have on the new partition. To do that, press &amp;#39;t&amp;#39; and then select &amp;#39;c&amp;#39; for a FAT file system. You will be asked whether you want to create a primary or extended partition. Press &amp;#39;p&amp;#39; to create a primary partition. You now have to tell, what type of file system you would like to have on the new partition. To do that, press &amp;#39;t&amp;#39; and then enter &amp;#39;c&amp;#39; for a FAT file system. There are several other filesystems supported. You can see a list of all those by pressing &amp;#39;l&amp;#39;.&lt;/p&gt;

&lt;p&gt;Note that fdisk will not write the partition table to disk until you explicitly tell it to do so. So, go ahead and enter &amp;#39;w&amp;#39; to write the partition table to disk. You can quit the program without saving any changes to disk by pressing &amp;#39;q&amp;#39; before you press &amp;#39;w&amp;#39;. At this point, you have created a raw partition with no filesystem on it. As such, the pendrive is useless. Run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo eject /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, unplug the drive and plug it in again. If your linux box supports automounting, you should get an error saying unable to read the disk. This is simply because you have not created any filesystem on the disk. Put in simple words, the disk is not formatted yet. So go ahead and eject the drive using the same command as above.&lt;/p&gt;

&lt;p&gt;Now, format the pendrive as FAT using the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo mkfs.vfat /dev/sdb1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the above command takes the specific partition to be formatted like sdb1 or sdc1, so different partitions on the disk may be formatted as different file systems. That&amp;#39;s it, you are now ready to create your bootable USB disk using the commands in the previous section.&lt;/p&gt;

&lt;h4&gt;Ripping a CD or DVD for local storage&lt;/h4&gt;

&lt;p&gt;Sometimes, you need to return a dvd to a friend and you do not have enough time to burn a copy of the dvd or donot have an extra dvd drive that can do the job. Moreover, your USB drive read is much slower that read from disk. So, why not make an exact copy of the entire cd or dvd to your disk which you can view anytime later or burn it to a dvd later. All you have to do is enter the following command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/dvd of=myfile.iso bs=2048
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, if stands for input file. As you already know, every device is a file in Linux. Hence, the dvd drive is represented by /dev/dvd and the cdrom drive most likely by /dev/cdrom. Use the one appropriate for your case.        &lt;/p&gt;

&lt;p&gt;As you guessed, of stands for output file which is an exact mirror image of the cd or dvd which you can write to another cd or dvd anytime using the commands in the previous section.&lt;/p&gt;

&lt;p&gt;Now, that you have an iso file on your disk, you cannot simply view it anytime you want. To access the contents of the iso file, you will need to mount it at a particular mount point. So, go ahead and create a mount point &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo mkdir /tmp/myfiles
$ sudo mount -o ro,loop -t iso9660 myfile.iso /tmp/myfiles
$ cd /tmp/myfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it... you can now access the files as though you were accessing them from the dvd or cd only much faster. You have to keep in mind that you will not be able to write anything directly into /tmp/myfiles just as you would simply not be able to write into a dvd or cd. Thats the reason, the iso file is mounted as read-only.&lt;/p&gt;

&lt;h4&gt;Hiding a file or directory within an image&lt;/h4&gt;

&lt;p&gt;This is one severely cool trick which allows you to hide any file or directory within a harmless looking image. When you click on such a file, all you see is the image on your default image viewer. The image is not altered in any way. What you don&amp;#39;t see is the file you have hidden within the image.... Here is precisely how to do it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First you will need a harmless looking .png or .jpg image file... Feel free to download your favorite one from google images.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the file or directory you wish to hide has to be compressed into a zip archive.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ zip -r &amp;lt;compressed.zip&amp;gt; &amp;lt;file1&amp;gt; &amp;lt;dir1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, cat the image you downloaded with the compressed file you created above&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cat image.png compressed.zip &amp;gt; secret.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: do not change the ordering of the image and the compressed file. The image always has to always come first in the cat command.        &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now, remove the files and directories you wanted to hide and also the compressed.zip file using the rm command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats it... You now have a file by the name &amp;quot;secret.png&amp;quot; which if you open, will display the harmless looking image file. Nobody suspects that the image is hiding something sinister(unless ofcourse they are intelligent enough to do a ls -l and see the size of the image file)&lt;/p&gt;

&lt;p&gt;Now, all you have to do to get back your secret files and directories is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ unzip secret.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don&amp;#39;t worry if you get some weird warnings or errors when you run the command regarding some invalid content in the header. Thats the whole point you see !!! When we catted the image file at the start of the zip file, we inadvertently modified the header of secret.png, and hence the warnings and errors. Nonetheless, you should now see the compressed.zip file in the directory. Just extract its secret contents with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ unzip compressed.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;How to completely paralyze any Linux system which is using the bash shell&lt;/h4&gt;

&lt;p&gt;Most linux distros that you use today come preloaded with the bash shell as default, so you wouldn&amp;#39;t need to worry much to completely wreck your college linux server box or your best friends laptop in a matter of seconds. Just type in the following command, sit back and relax while the system starts to choke itself.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ :(){ :|:&amp;amp; };:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is one of the most cryptic commands you have probably ever seen and also one of the shortest ones considering the amount of carnage you are about to cause as soon as you press the enter key. But the command is really very simple to understand. So, here is the breakup of the command.&lt;/p&gt;

&lt;p&gt;This command is creating a bash function by the name &amp;#39;:&amp;#39; , hence you see :()&lt;/p&gt;

&lt;p&gt;The body of this bash function is within the curly braces { }&lt;/p&gt;

&lt;p&gt;What we are doing within this function is calling the same function &amp;#39;:&amp;#39; again. Kinda like recursion. And this function call is running in the background. Thats the reason you see the ampersand (&amp;amp;) at the end. In short, this function is telling bash to keep on forking an innumerable number of child processes. But, this is just the function definition, no harm here. The actual fun starts after the semicolon(;) which as you know acts as a seperator between two linux commands. The first command was merely writing the function definition. But the &amp;#39;:&amp;#39; you see after the semicolon is the command that is actually calling the function &amp;#39;:&amp;#39;.&lt;/p&gt;

&lt;p&gt;All hell is let loose on the system. Bash starts to fork child processes that grow exponentially. Within a matter of seconds, you will have millions of child processes on your system, and every system can only take so much. The system is in effect, choking itself, and in seconds, your system is completely lifeless.... mouse doesn&amp;#39;t work, keypresses don&amp;#39;t do anything... So you cannot even press Ctrl+C to stop the system from killing itself. All you can do at this point, is to hold down the power button for some time to hard-reboot the system. And the really funny and interesting about this command is that, the more processing power your system has, the faster it will kill-itself because it is creating child processes at a much faster rate that a slow, dim-witted computer where you might even have time to press Ctrl+C after you have realized your mistake. Now, you don&amp;#39;t call this command the &amp;quot;bash fork bomb&amp;quot; for no reason.&lt;/p&gt;

&lt;p&gt;This goes without saying that &amp;quot;With great power comes great responsibility&amp;quot; :P&lt;/p&gt;

&lt;h4&gt;Some random, super-cool command line fu&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A stopwatch on the terminal&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ time read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will start a stopwatch on your terminal. Simply press Ctrl+D to stop the timer and see the elapsed time.        &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to know how many CPU cores are there on the computer ?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo cat /proc/cpuinfo | grep processor | wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Infact, you can see a lot of info about each of these cores with the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo cat /proc/cpuinfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Finding the name of the linux distro running on the computer&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo cat /etc/issue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to know whether you have a 32bit or 64bit OS running on your computer ?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo getconf LONG_BIT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Killing a process that has locked a particular file, when you know the file name that is locked, but don&amp;#39;t know which process is locking it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo fuser -k &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is useful when you get an error saying this particular file is locked by another process. This happens many times when you are updating your linux installation and the process got terminated leaving the /var/lib/dpkg/cache file locked. You get an error when you try to re-start the system update again. You can use this command in such situations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Easiest way to re-run the previous command with superuser permissions&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo !!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This saves you from pressing up arrow and then home key and then typing sudo.        &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Easily doing a reverse search for a command you entered previously. In bash, simply press Ctrl+R and then start typing the part of the comamnd you remember. Hit enter when you find the command you were looking for. This command gives rise to another neat trick. Suppose you use a lengthy command very frequently during the session. The first time you run the long command, run it as follows&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ &amp;lt;command&amp;gt; #my_label
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next time you want to run the same command, all you have to do is press Ctrl+R to start reverse-search and then enter &amp;quot;my_label&amp;quot; followed by enter key... How cool is that !!!.        &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to get vi stlye editing commands working in bash&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;quot;set editing-mode vi&amp;quot; &amp;gt; ~/.inputrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;some super useful bash command editing keys&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press Ctrl+W to erase a single word before the current cursor position.&lt;/li&gt;
&lt;li&gt;Press Ctrl+U to erase the entire line before the current cursor position.&lt;/li&gt;
&lt;li&gt;Press Ctrl+K to erase the entire line after the current cursor position.&lt;/li&gt;
&lt;li&gt;Press Ctrl+A to go to the beginning of the command.&lt;/li&gt;
&lt;li&gt;Press Ctrl+E to go the the end of the command.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to display a popup notification when a command completes ( requires libnotify to be installed )&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget &amp;lt;URL&amp;gt; ; notify-send &amp;quot;wget&amp;quot; &amp;quot;your download is complete&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above command displays a popup notification once wget finishes downloading the file. wget can be replaced by any command actually. The first argument to the notify-send command is the &amp;quot;title&amp;quot; and the second argument is the &amp;quot;body&amp;quot; of the popup notification. You can change it to whatever you like.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Turning of the monitor to save power when there is no hardware key available to do so(say, on a laptop)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ xset dpms force off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to copy the output of any command directly to the system clipboard&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ &amp;lt;command&amp;gt; | xsel --clipboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to open an file from the command line using the default application for that file&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ xdg-open &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to save the output of any command as an image file&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ &amp;lt;command&amp;gt; | convert label:@- &amp;lt;image_name.png&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to convert an entire man page into pdf format for later viewing        &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ man -t &amp;lt;command_name&amp;gt; | ps2pdf - &amp;lt;command_name.pdf&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing the same packages and software you already have on a fully configured linux system, on another freshly installed linux system in a single command&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, run this command on the fully configured linux box&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ sudo dpkg --get-selections &amp;gt; my_linux_software
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, transfer this file to the freshly installed linux box an enter the following command        &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ cat may_linux_software|sudo dpkg --set-selections &amp;amp;&amp;amp; sudo dselect install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ofcourse, you will need network connection on your freshly installed linux box, but you will be saved from laboriously selecting all your favorite software from the software management tool.        &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Deleting a particular line number from a given file without opening it in any editor&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sed -i 8d &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command deletes the 8th line from the specified file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running a command at a specified time&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &amp;quot;command you want to run | at 01:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the time is in 24hr format.        &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to create a pencil sketch out of any image file  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ convert &amp;lt;input_image&amp;gt; -colorspace gray \( +clone -blur 0x2 \) \
  +swap -compose divide -composite -linear-stretch 5%x0% &amp;lt;output_image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can ofcourse add an alias or better still, a bash function for such long commands in your ~/.bashrc to make your life easier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to check unread mail from your gmail inbox from the command line&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl -u your_email@gmail.com:your_password --silent \
  &amp;quot;https://mail.google.com/mail/feed/atom&amp;quot; | tr -d &amp;#39;\n&amp;#39; | \
  awk -F &amp;#39;&amp;lt;entry&amp;gt;&amp;#39; &amp;#39;{for (i=2; i&amp;lt;=NF; i++) {print $i}}&amp;#39; | \
  sed -n &amp;quot;s/&amp;lt;title&amp;gt;\(.*\)&amp;lt;\/title&amp;gt;&amp;lt;summary&amp;gt;\(.*\)&amp;lt;\/summary.*name&amp;gt;\
  \(.*\)&amp;lt;\/name&amp;gt;&amp;lt;email&amp;gt;\(.*\)&amp;lt;\/email&amp;gt;.*/\n\3\(\4\) - \1 - \2\n/p&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command might look like too much to handle, but it is really extremely simple. All it is doing is reading from your gmail account&amp;#39;s atom feed and formatting the output using awk and sed. As before, you are better of creating an alias(or a bash function) in your ~/.bashrc for this command.&lt;/p&gt;

&lt;h4&gt;A super-simple chat program that you can run from the command line&lt;/h4&gt;

&lt;p&gt;You will need to install &amp;quot;netcat&amp;quot; on your linux box for this to work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open a terminal on Computer A and type in&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ nc -l 12345
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also note down the IP addr of Computer A by running the &amp;quot;ifconfig&amp;quot; command. Let us say, the IP addr of Computer A is a.b.c.d&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, open a terminal on another Computer B which also has &amp;quot;netcat&amp;quot; installed and type in&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ nc a.b.c.d 12345
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, 12345 is simply a port number. You can specify anything you want as long as it is not already in use.        &lt;/p&gt;

&lt;p&gt;Thats it... You have a chat program running. Type anything and press enter, it will be immediately visible on the other computer. To test this out you might as well run the two commands on two different terminals on the same computer, in which case, you will have to replace the IP addr a.b.c.d by the simple string &amp;quot;localhost&amp;quot;.&lt;/p&gt;

&lt;h4&gt;The fastest way to transfer files from Computer A to Computer B over the network from the command line&lt;/h4&gt;

&lt;p&gt;You will need &amp;quot;netcat&amp;quot; installed for this to work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On Computer A with ip addr a.b.c.d, run the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ tar -cf - /path/to/dir | \
  pv -s $(du -sb /path/to/dir | awk &amp;#39;{print $1}&amp;#39;) | \
  nc -l 12345
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On computer B, run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ nc a.b.c.d 12345 | pv | tar -xf -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All we are doing here is tarring the directory we want to transfer and then using netcat to transfer the file over the network. Note that there are actually no intermediate archives that are created either on Computer A or Computer B.&lt;/p&gt;

&lt;p&gt;The pv command in the middle is only there to show you a progress bar of how much data is left to be transferred. This can be useful for large files. But you can always competely remove it from both of the above commands and still work correctly. Only thing is you won&amp;#39;t have any feedback until the entire directory is transferred. Note that pv is not available as default on most linux boxes. You will have to install it.&lt;/p&gt;

&lt;p&gt;You may be wondering why do we need to perform a tar when we are simply transferring a single file instead of a directory. The answer is you don&amp;#39;t. To transfer a single file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On Computer A you will run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cat /path/to/file | nc -l 12345
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To receive the file on Computer B, you would run,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ nc a.b.c.d 12345 &amp;gt; myfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As simple as that!!!.        &lt;/p&gt;

&lt;p&gt;A word of caution. On some computers with different version of netcat installed, you will need to replace the command &amp;quot;nc -l 12345&amp;quot; with &amp;quot;nc -l -p 12345&amp;quot; for netcat to work correctly. All other commands remain same.&lt;/p&gt;

&lt;h4&gt;How to get a progress bar while copying huge files&lt;/h4&gt;

&lt;p&gt;Normally cp command does not give you any output while you are copying files. You have no idea how much copying is left to be done. However you can use a slightly different command to copy large with a progress bar shown. As you might have guessed, the solution is to use &amp;quot;pv&amp;quot; command described in the previous section.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cat originalfile.txt | pv &amp;gt; newfile.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Wuff... this is one huge article, but one which I enjoyed writing and one I hope you will enjoy executing. I have at some point used all of these commands in my day to day work. It is very likely that you may get errors saying command not found while executing some of these commands, because you don&amp;#39;t have the necessary packages installed. You can always install them and continue playing or you can leave a comment below and I will help you get it working. Enjoy Linux :) :) and stay tuned for more comprehensive articles on specific Linux tools like vim, ssh, scp, rsync, git version control system and more in the future.&lt;/p&gt;

&lt;p&gt;Once again I sincerely thank &lt;a href=&quot;http://chandrashekar.info/&quot;&gt;Mr. Chandrashekar Babu&lt;/a&gt; for his superb linux training classes at Cisco and for enlightening us about some of the above Linux command line tricks.&lt;/p&gt;
</description>
</item>

<item>
<title>How to go back to stock rom on Motorola Defy</title>
<link>http://varunbpatil.github.com/2012/08/26/stock-defy</link>
<published>2012-08-26T00:00:00+05:30</published>
<guid>http://varunbpatil.github.com/2012/08/26/stock-defy</guid>
<description>&lt;p&gt;I have always loved custom ROM&amp;#39;s like the Cyanogenmod and MIUI. I like to be on the bleeding edge. Once I got my hands at the ICS and JB rom&amp;#39;s by Cyanogenmod, I never thought I&amp;#39;d look back. I never thought I&amp;#39;d have to ever again go back to stock Motorola defy Froyo ROM. But, I was wrong. Recently, on one of my regular Cyanogenmod JB nightly(Quarx&amp;#39;s build) updates, my phone restarted in the middle of the update and that was it... GONE !!!. The phone did not boot and when I tried clearing the cache, I got some weird errors. I couldn&amp;#39;t get access to the SDcard on the phone... Even wiping data and clearing dalvik cache did not help... I really thought I had bricked my phone, but then after some frantic google searches on the XDA developers forum, I learnt that bricking a motorola defy is really hard, thanks to the locked bootloader on the motorola defy.&lt;/p&gt;

&lt;p&gt;Then I heard several such cache errors being reported and several solution to the same, the most recommended of which was to go back to stock ROM by using a tool called RSDLite and without a doubt, it worked flawlessly and the procedure couldn&amp;#39;t have been easier. Here are all the steps you need to go back to stock ROM on motorola defy(if you have had any cache errors and unable to boot up). I have even given the steps to once again flash your favourite custom ROM after re-rooting your defy, if you are one of those people who cannot live without the custom ROM, but only need the stock ROM as a way to recover from the horrifying errors.&lt;/p&gt;

&lt;h4&gt;What you will need before you start&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;strong&gt;RSDLite&lt;/strong&gt; from &lt;a href=&quot;http://forum.xda-developers.com/attachment.php?attachmentid=835334&amp;amp;d=1325246927&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make sure your computer can recognize your defy... make sure you have the &lt;strong&gt;motorola defy drivers&lt;/strong&gt; installed on your windows system. You can download the drivers &lt;a href=&quot;http://forum.xda-developers.com/attachment.php?attachmentid=525694&amp;amp;d=1298502477&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download the correct &lt;strong&gt;&amp;quot;.sbf&amp;quot; file&lt;/strong&gt; for your motorola defy from &lt;a href=&quot;http://sbf.droid-developers.org/phone.php?device=27&quot;&gt;here&lt;/a&gt;. This is the most overwhelming aspect of it all, with so many .sbf file versions out there for the taking and warnings everywhere regarding the consequences of flashing a wrong sbf file. At this point it pays to remember which version of Android your phone had when you bought it and whether it came loaded with Motoblur or not. I had bought my Motorola defy in India and had come with Froyo and without motoblur... So the sbf file I downloaded is &lt;a href=&quot;http://sbf.droid-developers.org/download.php?device=27&amp;amp;file=577&quot;&gt;here&lt;/a&gt;. This is a gzip archive. You will need to extract it to get the .sbf file.&lt;/li&gt;
&lt;li&gt;If you want to re-root your phone and flash a Custom ROM again!!!, you will need &lt;a href=&quot;http://download.cnet.com/SuperOneClick/3000-2094_4-75447027.html&quot;&gt;SuperOneClick&lt;/a&gt; and &lt;a href=&quot;http://www.4shared.com/file/PbVxYsPx/sndinitdefy__23_.html&quot;&gt;SndInitDefy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Procedure to go back to stock on Motorola defy&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Power off&lt;/strong&gt; your phone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Press and hold the volume down&lt;/strong&gt; button while booting. You will see a triangle with an exclamation mark on the screen.&lt;/li&gt;
&lt;li&gt;Now press both the volume up and volume down buttons &lt;strong&gt;simultaneously&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;At the screen that comes up, &lt;strong&gt;wipe cache and wipe data&lt;/strong&gt; and factory reset. Don&amp;#39;t worry if you get cache errors here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reboot&lt;/strong&gt; the phone once again, this time while keeping the &lt;strong&gt;volume up button depressed&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You will enter a screen with white text on a black background, saying something like, USB connection or something.&lt;/li&gt;
&lt;li&gt;Now connect your phone to the computer via the USB cable, and you should see a change in the text displayed on the phone... something like USB connected.&lt;/li&gt;
&lt;li&gt;This means that your phone has been detected by the computer and you have the right motorola drivers for your phone.&lt;/li&gt;
&lt;li&gt;Now &lt;strong&gt;launch RSDLite&lt;/strong&gt; (you will have to install it first on your computer). There should be one line in the progress display area that shows some info about the current status of your phone. If this line is not there, it means your device is not detected by the computer. Try reinstalling the defy drivers.&lt;/li&gt;
&lt;li&gt;Now it is time to &lt;strong&gt;select the .sbf file&lt;/strong&gt; that you downloaded earlier. To do this, click on the &amp;quot;...&amp;quot; button in RSDLite and select the .sbf file from your computer&amp;#39;s filesystem.&lt;/li&gt;
&lt;li&gt;Now &lt;strong&gt;click on start&lt;/strong&gt;. The process of flashing the stock ROM will begin. The progress display area will show the percentage completion of the process.&lt;/li&gt;
&lt;li&gt;Sit back and relax. Your phone will be alright afterall. Wait till it says &amp;quot;executed : 100%&amp;quot;, but &lt;strong&gt;do not disconnect&lt;/strong&gt; the phone or exit the program.&lt;/li&gt;
&lt;li&gt;Now the phone will automatically reboot and continue the process of flashing.&lt;/li&gt;
&lt;li&gt;Wait till the whole process completes and you see a &lt;strong&gt;&amp;quot;Finished&amp;quot; and &amp;quot;Pass&amp;quot;&lt;/strong&gt; in the results area.&lt;/li&gt;
&lt;li&gt;That was it... Congratulations!!! You now have stock defy ROM on your phone. Now you can heave a sigh of relief knowing that you have not bricked your phone.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Re-rooting and re-installing your favorite custom ROM&lt;/h4&gt;

&lt;p&gt;This is for all those impatient people who want to get back to their favorite Custom ROM and only needed the stock ROM flashing to get rid of those terrifying cache errors. As usual, it is very simple, so read on...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The program I use to root my Motorola defy is &lt;strong&gt;SuperOneClick&lt;/strong&gt;, which you would have downloaded from the pre-requisites section above. Make sure you have &lt;strong&gt;enabled USB Debugging on your phone&lt;/strong&gt; after you have flashed the Stock Motorola defy ROM following the steps above. Launch the SuperOneClick program, connect your phone to the computer via USB and &lt;strong&gt;click on the &amp;quot;ROOT&amp;quot;&lt;/strong&gt; button at the top left corner of the SuperOneClick program. The rooting process will start. At some point, it will prompt you whether you would like to install BusyBox on your phone. Click on YES. The phone will reboot a couple of times during the process... Nothing to worry there. At the end of the rooting procedure you will be prompted whether you would like to test the root... Click on YES. That&amp;#39;s it... Your phone is rooted. You can close the SuperOneClick program.&lt;/li&gt;
&lt;li&gt;Now that you have root on your phone, you have to &lt;strong&gt;install 2ndinit and recovery&lt;/strong&gt; which will allow you to flash any custom ROM, that you so loved before you were brought down to your knees by the cache errors!!!.&lt;/li&gt;
&lt;li&gt;Transfer the SndInitDefy.apk file that you downloaded earlier to your phone&amp;#39;s sdcard and install it like any other android app using the native file manager or any other file manager like ASTRO or ES File Explorer from the android market. To do this, however you will have to &lt;strong&gt;enable installing 3rd party apps&lt;/strong&gt;. This option is available in the Developer&amp;#39;s section in the settings screen. If you are feeling very geeky, you can as well use ADB to install the app with the command &amp;quot;adb install SndInitDefy.apk&amp;quot;. Now that you have installed the SndInitDefy app, launch it from your phone. You will see a text in red at the top saying that 2ndinit menu is not installed. So, go ahead and click the button in the middle of the screen to install 2ndinit menu. After that you should see a text in green at the top of the screen saying that 2ndinit menu has been installed. That&amp;#39;s it... You can now boot into recovery and flash your favorite Custom ROM just like you have done a gazillion times before :)&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>

</channel>
</rss>
